
-- ==============================================
-- Author:		Tomasz Pióro
-- Create date: 2014-07-14
-- Description:	Procedura Merge'ująca w schemacie NCTS.
-- ===============================================

CREATE PROCEDURE [ncts].[MergeTableFromStageODS] (@TableName VARCHAR(50) = NULL)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @Merged BIT = 0;

	IF (@TableName IS NULL) BEGIN
		;THROW 51001, 'Nie wskazano nazwy tabeli w parametrze @TableName procedury.', 0;
		END

	IF @TableName = 'ADD_INF_REQ_TYP' BEGIN
		MERGE INTO ncts.ADD_INF_REQ_TYP AS tgt
		USING [WI_StageODS].ncts.ADD_INF_REQ_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ADD_INF_REQ_TYP_NAM' BEGIN
		DELETE FROM ncts.ADD_INF_REQ_TYP_NAM
		MERGE INTO ncts.ADD_INF_REQ_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.ADD_INF_REQ_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ADD_INF_REQ_TYP_ID=src.ADD_INF_REQ_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ADD_INF_REQ_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.ADD_INF_REQ_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ADD_INF_RESP_TYP' BEGIN
		MERGE INTO ncts.ADD_INF_RESP_TYP AS tgt
		USING [WI_StageODS].ncts.ADD_INF_RESP_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ADD_INF_RESP_TYP_NAM' BEGIN
		DELETE	FROM ncts.ADD_INF_RESP_TYP_NAM;
		MERGE INTO ncts.ADD_INF_RESP_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.ADD_INF_RESP_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ADD_INF_RESP_TYP_ID=src.ADD_INF_RESP_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ADD_INF_RESP_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.ADD_INF_RESP_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ARE' BEGIN
		MERGE INTO ncts.ARE AS tgt
		USING [WI_StageODS].ncts.ARE AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ID=src.ID
		WHEN NOT MATCHED
		THEN INSERT (SID, ID)
		VALUES (src.SID, src.ID);
		SET @Merged = 1;
	END

	IF @TableName = 'ARE_ACT' BEGIN
        MERGE INTO ncts.ARE_ACT AS tgt
        USING [WI_StageODS].ncts.ARE_ACT AS src
        ON (tgt.SID=src.SID)
        WHEN MATCHED
        THEN UPDATE SET
        tgt.ARE_ID=src.ARE_ID, tgt.DAT_VAL=src.DAT_VAL, tgt.MOD_TYP=src.MOD_TYP, tgt.OPER=src.OPER
        WHEN NOT MATCHED
        THEN INSERT (SID, ARE_ID, DAT_VAL, MOD_TYP, OPER)
        VALUES (src.SID, src.ARE_ID, src.DAT_VAL, src.MOD_TYP, src.OPER);
        SET @Merged = 1;
	END

	IF @TableName = 'ARE_DET' BEGIN
		MERGE INTO ncts.ARE_DET AS tgt
		USING [WI_StageODS].ncts.ARE_DET AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START_EC=src.DAT_START_EC, tgt.CURR_PAR_ID=src.CURR_PAR_ID, tgt.TYP=src.TYP, tgt.GEON_COD=src.GEON_COD, tgt.DAT_START_NCTS=src.DAT_START_NCTS, tgt.DAT_START_TCC=src.DAT_START_TCC, tgt.TCC_MEMB=src.TCC_MEMB, tgt.EC_MEMB=src.EC_MEMB, tgt.ARE_ACT_SID=src.ARE_ACT_SID
		WHEN NOT MATCHED
		THEN INSERT (DAT_START_EC, SID, CURR_PAR_ID, TYP, GEON_COD, DAT_START_NCTS, DAT_START_TCC, TCC_MEMB, EC_MEMB, ARE_ACT_SID)
		VALUES (src.DAT_START_EC, src.SID, src.CURR_PAR_ID, src.TYP, src.GEON_COD, src.DAT_START_NCTS, src.DAT_START_TCC, src.TCC_MEMB, src.EC_MEMB, src.ARE_ACT_SID);
		SET @Merged = 1;
	END

	IF @TableName = 'ARE_NAM' BEGIN
		DELETE FROM ncts.ARE_NAM
		MERGE INTO ncts.ARE_NAM AS tgt
		USING [WI_StageODS].ncts.ARE_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.ARE_ACT_SID=src.ARE_ACT_SID, tgt.STATUS=src.STATUS, tgt.ARE_ID=src.ARE_ID
		WHEN NOT MATCHED
		THEN INSERT (LANG_ID, NAM, ARE_ACT_SID, STATUS, ARE_ID)
		VALUES (src.LANG_ID, src.NAM, src.ARE_ACT_SID, src.STATUS, src.ARE_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_GOODS_ITEM' BEGIN
		MERGE INTO ncts.CONTR_GOODS_ITEM AS tgt
		USING [WI_StageODS].ncts.CONTR_GOODS_ITEM AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.MRN=src.MRN, tgt.GOODS_ITEM_NUMB=src.GOODS_ITEM_NUMB, tgt.CONTR_LOC=src.CONTR_LOC, tgt.CONTR_IND=src.CONTR_IND, tgt.GROSS_MASS=src.GROSS_MASS, tgt.NET_MASS=src.NET_MASS, tgt.TEXT_DESCR=src.TEXT_DESCR, tgt.TEXT_DESCR_LNG=src.TEXT_DESCR_LNG, tgt.HS_GOODS_CLASS_ID=src.HS_GOODS_CLASS_ID, tgt.CN_GOODS_CLASS_ID=src.CN_GOODS_CLASS_ID, tgt.TEXT_DESCR_TEXT=src.TEXT_DESCR_TEXT, tgt.COMM_COD_TEXT=src.COMM_COD_TEXT, tgt.GROSS_MASS_TEXT=src.GROSS_MASS_TEXT, tgt.NET_MASS_TEXT=src.NET_MASS_TEXT, tgt.UNL_VERS_NUMB=src.UNL_VERS_NUMB
		WHEN NOT MATCHED
		THEN INSERT (SID, MRN, GOODS_ITEM_NUMB, CONTR_LOC, CONTR_IND, GROSS_MASS, NET_MASS, TEXT_DESCR, TEXT_DESCR_LNG, HS_GOODS_CLASS_ID, CN_GOODS_CLASS_ID, TEXT_DESCR_TEXT, COMM_COD_TEXT, GROSS_MASS_TEXT, NET_MASS_TEXT, UNL_VERS_NUMB)
		VALUES (src.SID, src.MRN, src.GOODS_ITEM_NUMB, src.CONTR_LOC, src.CONTR_IND, src.GROSS_MASS, src.NET_MASS, src.TEXT_DESCR, src.TEXT_DESCR_LNG, src.HS_GOODS_CLASS_ID, src.CN_GOODS_CLASS_ID, src.TEXT_DESCR_TEXT, src.COMM_COD_TEXT, src.GROSS_MASS_TEXT, src.NET_MASS_TEXT, src.UNL_VERS_NUMB);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_GOODS_ITEM_CONT' BEGIN
		MERGE INTO ncts.CONTR_GOODS_ITEM_CONT AS tgt
		USING [WI_StageODS].ncts.CONTR_GOODS_ITEM_CONT AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CONTR_GOODS_ITEM_SID=src.CONTR_GOODS_ITEM_SID, tgt.CONT_NUMB=src.CONT_NUMB, tgt.CONTR_LEV=src.CONTR_LEV, tgt.CONT_NUMB_TEXT=src.CONT_NUMB_TEXT
		WHEN NOT MATCHED
		THEN INSERT (SID, CONTR_GOODS_ITEM_SID, CONT_NUMB, CONTR_LEV, CONT_NUMB_TEXT)
		VALUES (src.SID, src.CONTR_GOODS_ITEM_SID, src.CONT_NUMB, src.CONTR_LEV, src.CONT_NUMB_TEXT);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_GOODS_ITEM_DESCR' BEGIN
		MERGE INTO ncts.CONTR_GOODS_ITEM_DESCR AS tgt
		USING [WI_StageODS].ncts.CONTR_GOODS_ITEM_DESCR AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CONTR_GOODS_ITEM_SID=src.CONTR_GOODS_ITEM_SID, tgt.CONTR_IND=src.CONTR_IND, tgt.POINTER=src.POINTER, tgt.DESCR=src.DESCR, tgt.DESCR_LNG=src.DESCR_LNG
		WHEN NOT MATCHED
		THEN INSERT (SID, CONTR_GOODS_ITEM_SID, CONTR_IND, POINTER, DESCR, DESCR_LNG)
		VALUES (src.SID, src.CONTR_GOODS_ITEM_SID, src.CONTR_IND, src.POINTER, src.DESCR, src.DESCR_LNG);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_GOODS_ITEM_DOC' BEGIN
		MERGE INTO ncts.CONTR_GOODS_ITEM_DOC AS tgt
		USING [WI_StageODS].ncts.CONTR_GOODS_ITEM_DOC AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CONTR_GOODS_ITEM_SID=src.CONTR_GOODS_ITEM_SID, tgt.DOC_TYP_ID=src.DOC_TYP_ID, tgt.SENT=src.SENT, tgt.COMPL_OF_INF=src.COMPL_OF_INF, tgt.COMPL_OF_INF_LNG=src.COMPL_OF_INF_LNG, tgt.CONTR_LEV=src.CONTR_LEV, tgt.DOC_REF=src.DOC_REF, tgt.DOC_REF_LNG=src.DOC_REF_LNG, tgt.DOC_TYP_TEXT=src.DOC_TYP_TEXT, tgt.DOC_REF_TEXT=src.DOC_REF_TEXT, tgt.COMPL_OF_INF_TEXT=src.COMPL_OF_INF_TEXT
		WHEN NOT MATCHED
		THEN INSERT (SID, CONTR_GOODS_ITEM_SID, DOC_TYP_ID, SENT, COMPL_OF_INF, COMPL_OF_INF_LNG, CONTR_LEV, DOC_REF, DOC_REF_LNG, DOC_TYP_TEXT, DOC_REF_TEXT, COMPL_OF_INF_TEXT)
		VALUES (src.SID, src.CONTR_GOODS_ITEM_SID, src.DOC_TYP_ID, src.SENT, src.COMPL_OF_INF, src.COMPL_OF_INF_LNG, src.CONTR_LEV, src.DOC_REF, src.DOC_REF_LNG, src.DOC_TYP_TEXT, src.DOC_REF_TEXT, src.COMPL_OF_INF_TEXT);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_GOODS_ITEM_PACK' BEGIN
		MERGE INTO ncts.CONTR_GOODS_ITEM_PACK AS tgt
		USING [WI_StageODS].ncts.CONTR_GOODS_ITEM_PACK AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CONTR_GOODS_ITEM_SID=src.CONTR_GOODS_ITEM_SID, tgt.PACK_TYP_ID=src.PACK_TYP_ID, tgt.PACK_MARKS_AND_IDENT=src.PACK_MARKS_AND_IDENT, tgt.PACK_MARKS_AND_IDENT_LNG=src.PACK_MARKS_AND_IDENT_LNG, tgt.NUMB_OF_PACK=src.NUMB_OF_PACK, tgt.NUMB_OF_PIEC=src.NUMB_OF_PIEC, tgt.CONTR_LEV=src.CONTR_LEV, tgt.CONTR_DESCR=src.CONTR_DESCR, tgt.CONTR_DESCR_LNG=src.CONTR_DESCR_LNG, tgt.PACK_TYP_TEXT=src.PACK_TYP_TEXT, tgt.NUMB_OF_PACK_TEXT=src.NUMB_OF_PACK_TEXT, tgt.NUMB_OF_PIEC_TEXT=src.NUMB_OF_PIEC_TEXT, tgt.MARKS_AND_IDENT_TEXT=src.MARKS_AND_IDENT_TEXT
		WHEN NOT MATCHED
		THEN INSERT (SID, CONTR_GOODS_ITEM_SID, PACK_TYP_ID, PACK_MARKS_AND_IDENT, PACK_MARKS_AND_IDENT_LNG, NUMB_OF_PACK, NUMB_OF_PIEC, CONTR_LEV, CONTR_DESCR, CONTR_DESCR_LNG, PACK_TYP_TEXT, NUMB_OF_PACK_TEXT, NUMB_OF_PIEC_TEXT, MARKS_AND_IDENT_TEXT)
		VALUES (src.SID, src.CONTR_GOODS_ITEM_SID, src.PACK_TYP_ID, src.PACK_MARKS_AND_IDENT, src.PACK_MARKS_AND_IDENT_LNG, src.NUMB_OF_PACK, src.NUMB_OF_PIEC, src.CONTR_LEV, src.CONTR_DESCR, src.CONTR_DESCR_LNG, src.PACK_TYP_TEXT, src.NUMB_OF_PACK_TEXT, src.NUMB_OF_PIEC_TEXT, src.MARKS_AND_IDENT_TEXT);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_GOODS_ITEM_SENS' BEGIN
		MERGE INTO ncts.CONTR_GOODS_ITEM_SENS AS tgt
		USING [WI_StageODS].ncts.CONTR_GOODS_ITEM_SENS AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CONTR_GOODS_ITEM_SID=src.CONTR_GOODS_ITEM_SID, tgt.SENS_GOODS_CLASS_SID=src.SENS_GOODS_CLASS_SID, tgt.SENS_QUANT=src.SENS_QUANT, tgt.CONTR_LEV=src.CONTR_LEV, tgt.SGI_CODE_TEXT=src.SGI_CODE_TEXT, tgt.SENS_QUANT_TEXT=src.SENS_QUANT_TEXT
		WHEN NOT MATCHED
		THEN INSERT (SID, CONTR_GOODS_ITEM_SID, SENS_GOODS_CLASS_SID, SENS_QUANT, CONTR_LEV, SGI_CODE_TEXT, SENS_QUANT_TEXT)
		VALUES (src.SID, src.CONTR_GOODS_ITEM_SID, src.SENS_GOODS_CLASS_SID, src.SENS_QUANT, src.CONTR_LEV, src.SGI_CODE_TEXT, src.SENS_QUANT_TEXT);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_GOODS_ITEM_SPEC_MENT' BEGIN
		MERGE INTO ncts.CONTR_GOODS_ITEM_SPEC_MENT AS tgt
		USING [WI_StageODS].ncts.CONTR_GOODS_ITEM_SPEC_MENT AS src
		ON (tgt.CONTR_GOODS_ITEM_SID=src.CONTR_GOODS_ITEM_SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.SID=src.SID, tgt.SPEC_MENT_TYP_ID=src.SPEC_MENT_TYP_ID, tgt.CONTR_LEV=src.CONTR_LEV, tgt.EXP_FROM_COUNTRY_ID=src.EXP_FROM_COUNTRY_ID, tgt.EXP_FROM_EC=src.EXP_FROM_EC, tgt.TEXT=src.TEXT, tgt.TEXT_LNG=src.TEXT_LNG
		WHEN NOT MATCHED
		THEN INSERT (CONTR_GOODS_ITEM_SID, SID, SPEC_MENT_TYP_ID, CONTR_LEV, EXP_FROM_COUNTRY_ID, EXP_FROM_EC, TEXT, TEXT_LNG)
		VALUES (src.CONTR_GOODS_ITEM_SID, src.SID, src.SPEC_MENT_TYP_ID, src.CONTR_LEV, src.EXP_FROM_COUNTRY_ID, src.EXP_FROM_EC, src.TEXT, src.TEXT_LNG);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_RES_TYP' BEGIN
		MERGE INTO ncts.CONTR_RES_TYP AS tgt
		USING [WI_StageODS].ncts.CONTR_RES_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_RES_TYP_NAM' BEGIN
		DELETE FROM ncts.CONTR_RES_TYP_NAM
		MERGE INTO ncts.CONTR_RES_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.CONTR_RES_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CONTR_RES_TYP_ID=src.CONTR_RES_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START
		WHEN NOT MATCHED
		THEN INSERT (CONTR_RES_TYP_ID, LANG_ID, NAM, DAT_END, DAT_START)
		VALUES (src.CONTR_RES_TYP_ID, src.LANG_ID, src.NAM, src.DAT_END, src.DAT_START);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_TRANS_OPER_DESCR' BEGIN
		MERGE INTO ncts.CONTR_TRANS_OPER_DESCR AS tgt
		USING [WI_StageODS].ncts.CONTR_TRANS_OPER_DESCR AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.MRN=src.MRN, tgt.CONTR_LOC=src.CONTR_LOC, tgt.CONTR_IND=src.CONTR_IND, tgt.POINTER=src.POINTER, tgt.DESCR=src.DESCR, tgt.DESCR_LNG=src.DESCR_LNG, tgt.CORR_VAL=src.CORR_VAL, tgt.UNL_VERS_NUMB=src.UNL_VERS_NUMB
		WHEN NOT MATCHED
		THEN INSERT (SID, MRN, CONTR_LOC, CONTR_IND, POINTER, DESCR, DESCR_LNG, CORR_VAL, UNL_VERS_NUMB)
		VALUES (src.SID, src.MRN, src.CONTR_LOC, src.CONTR_IND, src.POINTER, src.DESCR, src.DESCR_LNG, src.CORR_VAL, src.UNL_VERS_NUMB);
		SET @Merged = 1;
	END

	IF @TableName = 'CUST_OFF_NAM' BEGIN
		MERGE INTO ncts.CUST_OFF_NAM AS tgt
		USING WI_StageODS.ncts.CUST_OFF_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.STATUS=src.STATUS, tgt.PREF_SUFF_LEV=src.PREF_SUFF_LEV, tgt.CUST_OFF_ACT_SID=src.CUST_OFF_ACT_SID, tgt.LANG_ID=src.LANG_ID, tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.NAM=src.NAM, tgt.PREF=src.PREF, tgt.CITY=src.CITY, tgt.STR_AND_NUMB=src.STR_AND_NUMB, tgt.PREF_SUFF_NAM=src.PREF_SUFF_NAM, tgt.ADD_SPAC=src.ADD_SPAC
		WHEN NOT MATCHED
		THEN INSERT (STATUS, PREF_SUFF_LEV, CUST_OFF_ACT_SID, LANG_ID, CUST_OFF_ID, NAM, PREF, CITY, STR_AND_NUMB, PREF_SUFF_NAM, ADD_SPAC)
		VALUES (src.STATUS, src.PREF_SUFF_LEV, src.CUST_OFF_ACT_SID, src.LANG_ID, src.CUST_OFF_ID, src.NAM, src.PREF, src.CITY, src.STR_AND_NUMB, src.PREF_SUFF_NAM, src.ADD_SPAC);
		SET @Merged = 1;
	END

	IF @TableName = 'CONTR_TRANS_OPER_DET' BEGIN
		MERGE INTO ncts.CONTR_TRANS_OPER_DET AS tgt
		USING [WI_StageODS].ncts.CONTR_TRANS_OPER_DET AS src
		ON (tgt.MRN=src.MRN and tgt.CONTR_LOC=src.CONTR_LOC)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TOT_NUMB_OF_ITEMS=src.TOT_NUMB_OF_ITEMS, tgt.TOT_NUMB_OF_PACK=src.TOT_NUMB_OF_PACK, tgt.IDENT_AT_DEP=src.IDENT_AT_DEP, tgt.IDENT_AT_DEP_LNG=src.IDENT_AT_DEP_LNG, tgt.NAT_AT_DEP=src.NAT_AT_DEP, tgt.TOT_GROSS_MASS=src.TOT_GROSS_MASS, tgt.NUMB_OF_SEALS=src.NUMB_OF_SEALS, tgt.TOT_NUMB_OF_ITEMS_TEXT=src.TOT_NUMB_OF_ITEMS_TEXT, tgt.IDENT_AT_DEP_TEXT=src.IDENT_AT_DEP_TEXT, tgt.NAT_AT_DEP_TEXT=src.NAT_AT_DEP_TEXT, tgt.TOT_NUMB_OF_PACK_TEXT=src.TOT_NUMB_OF_PACK_TEXT, tgt.TOT_GROSS_MASS_TEXT=src.TOT_GROSS_MASS_TEXT, tgt.NUMB_OF_SEALS_TEXT=src.NUMB_OF_SEALS_TEXT
		WHEN NOT MATCHED
		THEN INSERT (MRN, CONTR_LOC, TOT_NUMB_OF_ITEMS, TOT_NUMB_OF_PACK, IDENT_AT_DEP, IDENT_AT_DEP_LNG, NAT_AT_DEP, TOT_GROSS_MASS, NUMB_OF_SEALS, TOT_NUMB_OF_ITEMS_TEXT, IDENT_AT_DEP_TEXT, NAT_AT_DEP_TEXT, TOT_NUMB_OF_PACK_TEXT, TOT_GROSS_MASS_TEXT, NUMB_OF_SEALS_TEXT)
		VALUES (src.MRN, src.CONTR_LOC, src.TOT_NUMB_OF_ITEMS, src.TOT_NUMB_OF_PACK, src.IDENT_AT_DEP, src.IDENT_AT_DEP_LNG, src.NAT_AT_DEP, src.TOT_GROSS_MASS, src.NUMB_OF_SEALS, src.TOT_NUMB_OF_ITEMS_TEXT, src.IDENT_AT_DEP_TEXT, src.NAT_AT_DEP_TEXT, src.TOT_NUMB_OF_PACK_TEXT, src.TOT_GROSS_MASS_TEXT, src.NUMB_OF_SEALS_TEXT);
		SET @Merged = 1;
	END

	IF @TableName = 'CROSS_BORD_TYP' BEGIN
		MERGE INTO ncts.CROSS_BORD_TYP AS tgt
		USING [WI_StageODS].ncts.CROSS_BORD_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'CROSS_BORD_TYP_DESCR' BEGIN
		MERGE INTO ncts.CROSS_BORD_TYP_DESCR AS tgt
		USING [WI_StageODS].ncts.CROSS_BORD_TYP_DESCR AS src
		ON (tgt.CROSS_BORD_TYP_ID=src.CROSS_BORD_TYP_ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CROSS_BORD_TYP_ID=src.CROSS_BORD_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.DESCR=src.DESCR, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (CROSS_BORD_TYP_ID, LANG_ID, DESCR, DAT_START, DAT_END)
		VALUES (src.CROSS_BORD_TYP_ID, src.LANG_ID, src.DESCR, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'CUST_OFF' BEGIN
		MERGE INTO ncts.CUST_OFF AS tgt
		USING [WI_StageODS].ncts.CUST_OFF AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.GEO_INF_COD=src.GEO_INF_COD, tgt.REG_COD=src.REG_COD, tgt.DAT_START_NCTS=src.DAT_START_NCTS, tgt.PHON_NUMB=src.PHON_NUMB, tgt.FAX_NUMB=src.FAX_NUMB, tgt.TELEX_NUMB=src.TELEX_NUMB, tgt.E_MAIL_ADDR=src.E_MAIL_ADDR, tgt.COUNTRY_ID=src.COUNTRY_ID, tgt.TRAD_DED=src.TRAD_DED, tgt.POST_COD=src.POST_COD
		WHEN NOT MATCHED
		THEN INSERT (GEO_INF_COD, REG_COD, ID, DAT_START_NCTS, PHON_NUMB, FAX_NUMB, TELEX_NUMB, E_MAIL_ADDR, COUNTRY_ID, TRAD_DED, POST_COD)
		VALUES (src.GEO_INF_COD, src.REG_COD, src.ID, src.DAT_START_NCTS, src.PHON_NUMB, src.FAX_NUMB, src.TELEX_NUMB, src.E_MAIL_ADDR, src.COUNTRY_ID, src.TRAD_DED, src.POST_COD);
		SET @Merged = 1;
	END

	IF @TableName = 'CUST_OFF_ACT' BEGIN
		MERGE INTO ncts.CUST_OFF_ACT AS tgt
		USING [WI_StageODS].ncts.CUST_OFF_ACT AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.MOD_TYP=src.MOD_TYP, tgt.DAT_VAL=src.DAT_VAL, tgt.OPER=src.OPER
		WHEN NOT MATCHED
		THEN INSERT (SID, CUST_OFF_ID, MOD_TYP, DAT_VAL, OPER)
		VALUES (src.SID, src.CUST_OFF_ID, src.MOD_TYP, src.DAT_VAL, src.OPER);
		SET @Merged = 1;
	END

	IF @TableName = 'CUST_OFF_ADDR' BEGIN
		MERGE INTO ncts.CUST_OFF_ADDR AS tgt
		USING [WI_StageODS].ncts.CUST_OFF_ADDR AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.ID_WITHIN_CUST_OFF=src.ID_WITHIN_CUST_OFF, tgt.ADDR_TYP_ID=src.ADDR_TYP_ID, tgt.COUNTRY_ID=src.COUNTRY_ID, tgt.REG_ID=src.REG_ID, tgt.LOC_ID=src.LOC_ID, tgt.POST_COD=src.POST_COD, tgt.TRAD_SID=src.TRAD_SID
		WHEN NOT MATCHED
		THEN INSERT (SID, CUST_OFF_ID, ID_WITHIN_CUST_OFF, ADDR_TYP_ID, COUNTRY_ID, REG_ID, LOC_ID, POST_COD, TRAD_SID)
		VALUES (src.SID, src.CUST_OFF_ID, src.ID_WITHIN_CUST_OFF, src.ADDR_TYP_ID, src.COUNTRY_ID, src.REG_ID, src.LOC_ID, src.POST_COD, src.TRAD_SID);
		SET @Merged = 1;
	END

	IF @TableName = 'CUST_OFF_ROL' BEGIN
		MERGE INTO ncts.CUST_OFF_ROL AS tgt
		USING [WI_StageODS].ncts.CUST_OFF_ROL AS src
		ON (tgt.CUST_OFF_ACT_SID=src.CUST_OFF_ACT_SID and tgt.OFF_ROL_TYP_ID=src.OFF_ROL_TYP_ID and tgt.TRAFF_TYP_ID=src.TRAFF_TYP_ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.STATUS=src.STATUS
		WHEN NOT MATCHED
		THEN INSERT (STATUS, CUST_OFF_ACT_SID, OFF_ROL_TYP_ID, TRAFF_TYP_ID)
		VALUES (src.STATUS, src.CUST_OFF_ACT_SID, src.OFF_ROL_TYP_ID, src.TRAFF_TYP_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'DECL_GOODS_ITEM' BEGIN
		MERGE INTO ncts.DECL_GOODS_ITEM AS tgt
		USING [WI_StageODS].ncts.DECL_GOODS_ITEM AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.MRN=src.MRN, tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.VERS_NUMB=src.VERS_NUMB, tgt.GOODS_ITEM_NUMB=src.GOODS_ITEM_NUMB, tgt.HS_GOODS_CLASS_ID=src.HS_GOODS_CLASS_ID, tgt.CN_GOODS_CLASS_ID=src.CN_GOODS_CLASS_ID, tgt.TEXT_DESCR=src.TEXT_DESCR, tgt.TEXT_DESCR_LNG=src.TEXT_DESCR_LNG, tgt.DECL_TYP_ID=src.DECL_TYP_ID, tgt.GROSS_MASS=src.GROSS_MASS, tgt.NET_MASS=src.NET_MASS, tgt.DISP_COUNTRY_ID=src.DISP_COUNTRY_ID, tgt.DEST_COUNTRY_ID=src.DEST_COUNTRY_ID, tgt.CONSIGNEE_TRAD_SID=src.CONSIGNEE_TRAD_SID, tgt.CONSIGNOR_TRAD_SID=src.CONSIGNOR_TRAD_SID, tgt.CONSIGNOR_TRADS_SID=src.CONSIGNOR_TRADS_SID, tgt.CONSIGNEE_TRADS_SID=src.CONSIGNEE_TRADS_SID, tgt.SUSP_GOODS=src.SUSP_GOODS, tgt.TRANSPORT_CHARGE_PAYMENT=src.TRANSPORT_CHARGE_PAYMENT, tgt.COMM_REF_NUMBER=src.COMM_REF_NUMBER, tgt.UN_DANGER_CODE=src.UN_DANGER_CODE, tgt.SEC_CONSIGNEE_TRAD_SID=src.SEC_CONSIGNEE_TRAD_SID, tgt.SEC_CONSIGNEE_TRADS_SID=src.SEC_CONSIGNEE_TRADS_SID, tgt.SEC_CONSIGNOR_TRADS_SID=src.SEC_CONSIGNOR_TRADS_SID, tgt.SEC_CONSIGNOR_TRAD_SID=src.SEC_CONSIGNOR_TRAD_SID
		WHEN NOT MATCHED
		THEN INSERT (SID, MRN, TRANS_OPER_SID, VERS_NUMB, GOODS_ITEM_NUMB, HS_GOODS_CLASS_ID, CN_GOODS_CLASS_ID, TEXT_DESCR, TEXT_DESCR_LNG, DECL_TYP_ID, GROSS_MASS, NET_MASS, DISP_COUNTRY_ID, DEST_COUNTRY_ID, CONSIGNEE_TRAD_SID, CONSIGNOR_TRAD_SID, CONSIGNOR_TRADS_SID, CONSIGNEE_TRADS_SID, SUSP_GOODS, TRANSPORT_CHARGE_PAYMENT, COMM_REF_NUMBER, UN_DANGER_CODE, SEC_CONSIGNEE_TRAD_SID, SEC_CONSIGNEE_TRADS_SID, SEC_CONSIGNOR_TRADS_SID, SEC_CONSIGNOR_TRAD_SID)
		VALUES (src.SID, src.MRN, src.TRANS_OPER_SID, src.VERS_NUMB, src.GOODS_ITEM_NUMB, src.HS_GOODS_CLASS_ID, src.CN_GOODS_CLASS_ID, src.TEXT_DESCR, src.TEXT_DESCR_LNG, src.DECL_TYP_ID, src.GROSS_MASS, src.NET_MASS, src.DISP_COUNTRY_ID, src.DEST_COUNTRY_ID, src.CONSIGNEE_TRAD_SID, src.CONSIGNOR_TRAD_SID, src.CONSIGNOR_TRADS_SID, src.CONSIGNEE_TRADS_SID, src.SUSP_GOODS, src.TRANSPORT_CHARGE_PAYMENT, src.COMM_REF_NUMBER, src.UN_DANGER_CODE, src.SEC_CONSIGNEE_TRAD_SID, src.SEC_CONSIGNEE_TRADS_SID, src.SEC_CONSIGNOR_TRADS_SID, src.SEC_CONSIGNOR_TRAD_SID);
		SET @Merged = 1;
	END

	IF @TableName = 'DECL_GOODS_ITEM_CONT' BEGIN
		MERGE INTO ncts.DECL_GOODS_ITEM_CONT AS tgt
		USING [WI_StageODS].ncts.DECL_GOODS_ITEM_CONT AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CONT_NUMB=src.CONT_NUMB, tgt.DECL_GOODS_ITEM_SID=src.DECL_GOODS_ITEM_SID
		WHEN NOT MATCHED
		THEN INSERT (SID, CONT_NUMB, DECL_GOODS_ITEM_SID)
		VALUES (src.SID, src.CONT_NUMB, src.DECL_GOODS_ITEM_SID);
		SET @Merged = 1;
	END

	IF @TableName = 'DECL_GOODS_ITEM_DOC' BEGIN
		MERGE INTO ncts.DECL_GOODS_ITEM_DOC AS tgt
		USING [WI_StageODS].ncts.DECL_GOODS_ITEM_DOC AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DOC_TYP_ID=src.DOC_TYP_ID, tgt.DECL_GOODS_ITEM_SID=src.DECL_GOODS_ITEM_SID, tgt.SENT=src.SENT, tgt.DOC_REF=src.DOC_REF, tgt.DOC_REF_LNG=src.DOC_REF_LNG, tgt.COMPL_OF_INF=src.COMPL_OF_INF, tgt.COMPL_OF_INF_LNG=src.COMPL_OF_INF_LNG
		WHEN NOT MATCHED
		THEN INSERT (DOC_TYP_ID, SID, DECL_GOODS_ITEM_SID, SENT, DOC_REF, DOC_REF_LNG, COMPL_OF_INF, COMPL_OF_INF_LNG)
		VALUES (src.DOC_TYP_ID, src.SID, src.DECL_GOODS_ITEM_SID, src.SENT, src.DOC_REF, src.DOC_REF_LNG, src.COMPL_OF_INF, src.COMPL_OF_INF_LNG);
		SET @Merged = 1;
	END

	IF @TableName = 'DECL_GOODS_ITEM_PACK' BEGIN
		MERGE INTO ncts.DECL_GOODS_ITEM_PACK AS tgt
		USING [WI_StageODS].ncts.DECL_GOODS_ITEM_PACK AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.PACK_TYP_ID=src.PACK_TYP_ID, tgt.PACK_MARKS_AND_IDENT=src.PACK_MARKS_AND_IDENT, tgt.PACK_MARKS_AND_IDENT_LNG=src.PACK_MARKS_AND_IDENT_LNG, tgt.NUMB_OF_PACK=src.NUMB_OF_PACK, tgt.NUMB_OF_PIEC=src.NUMB_OF_PIEC, tgt.DECL_GOODS_ITEM_SID=src.DECL_GOODS_ITEM_SID
		WHEN NOT MATCHED
		THEN INSERT (SID, PACK_TYP_ID, PACK_MARKS_AND_IDENT, PACK_MARKS_AND_IDENT_LNG, NUMB_OF_PACK, NUMB_OF_PIEC, DECL_GOODS_ITEM_SID)
		VALUES (src.SID, src.PACK_TYP_ID, src.PACK_MARKS_AND_IDENT, src.PACK_MARKS_AND_IDENT_LNG, src.NUMB_OF_PACK, src.NUMB_OF_PIEC, src.DECL_GOODS_ITEM_SID);
		SET @Merged = 1;
	END

	IF @TableName = 'DECL_GOODS_ITEM_SENS' BEGIN
		MERGE INTO ncts.DECL_GOODS_ITEM_SENS AS tgt
		USING [WI_StageODS].ncts.DECL_GOODS_ITEM_SENS AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DECL_GOODS_ITEM_SID=src.DECL_GOODS_ITEM_SID, tgt.SENS_GOODS_CLASS_SID=src.SENS_GOODS_CLASS_SID, tgt.SENS_QUANT=src.SENS_QUANT
		WHEN NOT MATCHED
		THEN INSERT (SID, DECL_GOODS_ITEM_SID, SENS_GOODS_CLASS_SID, SENS_QUANT)
		VALUES (src.SID, src.DECL_GOODS_ITEM_SID, src.SENS_GOODS_CLASS_SID, src.SENS_QUANT);
		SET @Merged = 1;
	END

	IF @TableName = 'DECL_GOODS_ITEM_SPEC_MENT' BEGIN
		MERGE INTO ncts.DECL_GOODS_ITEM_SPEC_MENT AS tgt
		USING [WI_StageODS].ncts.DECL_GOODS_ITEM_SPEC_MENT AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DECL_GOODS_ITEM_SID=src.DECL_GOODS_ITEM_SID, tgt.SPEC_MENT_TYP_ID=src.SPEC_MENT_TYP_ID, tgt.EXP_FROM_EC=src.EXP_FROM_EC, tgt.EXP_COUNTRY_ID=src.EXP_COUNTRY_ID, tgt.TEXT=src.TEXT, tgt.TEXT_LNG=src.TEXT_LNG
		WHEN NOT MATCHED
		THEN INSERT (SID, DECL_GOODS_ITEM_SID, SPEC_MENT_TYP_ID, EXP_FROM_EC, EXP_COUNTRY_ID, TEXT, TEXT_LNG)
		VALUES (src.SID, src.DECL_GOODS_ITEM_SID, src.SPEC_MENT_TYP_ID, src.EXP_FROM_EC, src.EXP_COUNTRY_ID, src.TEXT, src.TEXT_LNG);
		SET @Merged = 1;
	END

	IF @TableName = 'DECL_TRANS_OPER_DET' BEGIN
		MERGE INTO ncts.DECL_TRANS_OPER_DET AS tgt
		USING [WI_StageODS].ncts.DECL_TRANS_OPER_DET AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.MRN=src.MRN, tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.VERS_NUMB=src.VERS_NUMB, tgt.DECL_TYP_ID=src.DECL_TYP_ID, tgt.NUMB_OF_LOAD_LISTS=src.NUMB_OF_LOAD_LISTS, tgt.TOT_NUMB_OF_ITEMS=src.TOT_NUMB_OF_ITEMS, tgt.TOT_NUMB_OF_PACK=src.TOT_NUMB_OF_PACK, tgt.DISP_COUNTRY_ID=src.DISP_COUNTRY_ID, tgt.DEST_COUNTRY_ID=src.DEST_COUNTRY_ID, tgt.IDENT_AT_DEP=src.IDENT_AT_DEP, tgt.IDENT_AT_DEP_LNG=src.IDENT_AT_DEP_LNG, tgt.NAT_AT_DEP=src.NAT_AT_DEP, tgt.CONT=src.CONT, tgt.SENS=src.SENS, tgt.NAT_CROSS_BORD=src.NAT_CROSS_BORD, tgt.IDENT_CROSS_BORD=src.IDENT_CROSS_BORD, tgt.IDENT_CROSS_BORD_LNG=src.IDENT_CROSS_BORD_LNG, tgt.TRANSP_TYP_CROSS_BORD=src.TRANSP_TYP_CROSS_BORD, tgt.TRANSP_MOD_AT_BORD=src.TRANSP_MOD_AT_BORD, tgt.INL_TRANSP_MOD=src.INL_TRANSP_MOD, tgt.LOAD_PLAC=src.LOAD_PLAC, tgt.CUST_OFF_ADDR_SID=src.CUST_OFF_ADDR_SID, tgt.TOT_GROSS_MASS=src.TOT_GROSS_MASS, tgt.NCTS_ACC_DOC_LANG_ID=src.NCTS_ACC_DOC_LANG_ID, tgt.DIAL_LANG_ID=src.DIAL_LANG_ID, tgt.CONSIGNOR_TRAD_SID=src.CONSIGNOR_TRAD_SID, tgt.CONSIGNOR_TRADS_SID=src.CONSIGNOR_TRADS_SID, tgt.CONSIGNEE_TRAD_SID=src.CONSIGNEE_TRAD_SID, tgt.CONSIGNEE_TRADS_SID=src.CONSIGNEE_TRADS_SID, tgt.REPR_NAM=src.REPR_NAM, tgt.REPR_TRAD_SID=src.REPR_TRAD_SID, tgt.REPR_CAP=src.REPR_CAP, tgt.REPR_CAP_LNG=src.REPR_CAP_LNG, tgt.AUTH_CONSIGNEE_TRAD_SID=src.AUTH_CONSIGNEE_TRAD_SID, tgt.AUTH_CONSIGNEE_TRADS_SID=src.AUTH_CONSIGNEE_TRADS_SID, tgt.DEST_CUST_OFF_ID=src.DEST_CUST_OFF_ID, tgt.AGR_GOODS_LOC=src.AGR_GOODS_LOC, tgt.AGR_GOODS_LOC_LNG=src.AGR_GOODS_LOC_LNG, tgt.AGR_GOODS_LOC_COD=src.AGR_GOODS_LOC_COD, tgt.DAT_EXP_ARR=src.DAT_EXP_ARR, tgt."PROC"=src."PROC", tgt.NUMB_OF_SEALS=src.NUMB_OF_SEALS, tgt.AUD_USER_ID=src.AUD_USER_ID, tgt.AUD_DAT_TIM=src.AUD_DAT_TIM, tgt.SUSP_GOODS=src.SUSP_GOODS, tgt.SPECIFIC_CIRC_INDICATOR=src.SPECIFIC_CIRC_INDICATOR, tgt.TRANSPORT_CHARGE_PAYMENT=src.TRANSPORT_CHARGE_PAYMENT, tgt.COMM_REF_NUMBER=src.COMM_REF_NUMBER, tgt.SECURITY_INDICATOR=src.SECURITY_INDICATOR, tgt.CONVEY_REF_NUMBER=src.CONVEY_REF_NUMBER, tgt.PLAC_UNLOAD_CODE=src.PLAC_UNLOAD_CODE, tgt.SEC_CONSIGNEE_TRAD_SID=src.SEC_CONSIGNEE_TRAD_SID, tgt.SEC_CONSIGNEE_TRADS_SID=src.SEC_CONSIGNEE_TRADS_SID, tgt.SEC_CONSIGNOR_TRADS_SID=src.SEC_CONSIGNOR_TRADS_SID, tgt.SEC_CONSIGNOR_TRAD_SID=src.SEC_CONSIGNOR_TRAD_SID, tgt.SEC_CARRIER_TRADS_SID=src.SEC_CARRIER_TRADS_SID, tgt.SEC_CARRIER_TRAD_SID=src.SEC_CARRIER_TRAD_SID
		WHEN NOT MATCHED
		THEN INSERT (SID, MRN, TRANS_OPER_SID, VERS_NUMB, DECL_TYP_ID, NUMB_OF_LOAD_LISTS, TOT_NUMB_OF_ITEMS, TOT_NUMB_OF_PACK, DISP_COUNTRY_ID, DEST_COUNTRY_ID, IDENT_AT_DEP, IDENT_AT_DEP_LNG, NAT_AT_DEP, CONT, SENS, NAT_CROSS_BORD, IDENT_CROSS_BORD, IDENT_CROSS_BORD_LNG, TRANSP_TYP_CROSS_BORD, TRANSP_MOD_AT_BORD, INL_TRANSP_MOD, LOAD_PLAC, CUST_OFF_ADDR_SID, TOT_GROSS_MASS, NCTS_ACC_DOC_LANG_ID, DIAL_LANG_ID, CONSIGNOR_TRAD_SID, CONSIGNOR_TRADS_SID, CONSIGNEE_TRAD_SID, CONSIGNEE_TRADS_SID, REPR_NAM, REPR_TRAD_SID, REPR_CAP, REPR_CAP_LNG, AUTH_CONSIGNEE_TRAD_SID, AUTH_CONSIGNEE_TRADS_SID, DEST_CUST_OFF_ID, AGR_GOODS_LOC, AGR_GOODS_LOC_LNG, AGR_GOODS_LOC_COD, DAT_EXP_ARR, "PROC", NUMB_OF_SEALS, AUD_USER_ID, AUD_DAT_TIM, SUSP_GOODS, SPECIFIC_CIRC_INDICATOR, TRANSPORT_CHARGE_PAYMENT, COMM_REF_NUMBER, SECURITY_INDICATOR, CONVEY_REF_NUMBER, PLAC_UNLOAD_CODE, SEC_CONSIGNEE_TRAD_SID, SEC_CONSIGNEE_TRADS_SID, SEC_CONSIGNOR_TRADS_SID, SEC_CONSIGNOR_TRAD_SID, SEC_CARRIER_TRADS_SID, SEC_CARRIER_TRAD_SID)
		VALUES (src.SID, src.MRN, src.TRANS_OPER_SID, src.VERS_NUMB, src.DECL_TYP_ID, src.NUMB_OF_LOAD_LISTS, src.TOT_NUMB_OF_ITEMS, src.TOT_NUMB_OF_PACK, src.DISP_COUNTRY_ID, src.DEST_COUNTRY_ID, src.IDENT_AT_DEP, src.IDENT_AT_DEP_LNG, src.NAT_AT_DEP, src.CONT, src.SENS, src.NAT_CROSS_BORD, src.IDENT_CROSS_BORD, src.IDENT_CROSS_BORD_LNG, src.TRANSP_TYP_CROSS_BORD, src.TRANSP_MOD_AT_BORD, src.INL_TRANSP_MOD, src.LOAD_PLAC, src.CUST_OFF_ADDR_SID, src.TOT_GROSS_MASS, src.NCTS_ACC_DOC_LANG_ID, src.DIAL_LANG_ID, src.CONSIGNOR_TRAD_SID, src.CONSIGNOR_TRADS_SID, src.CONSIGNEE_TRAD_SID, src.CONSIGNEE_TRADS_SID, src.REPR_NAM, src.REPR_TRAD_SID, src.REPR_CAP, src.REPR_CAP_LNG, src.AUTH_CONSIGNEE_TRAD_SID, src.AUTH_CONSIGNEE_TRADS_SID, src.DEST_CUST_OFF_ID, src.AGR_GOODS_LOC, src.AGR_GOODS_LOC_LNG, src.AGR_GOODS_LOC_COD, src.DAT_EXP_ARR, src."PROC", src.NUMB_OF_SEALS, src.AUD_USER_ID, src.AUD_DAT_TIM, src.SUSP_GOODS, src.SPECIFIC_CIRC_INDICATOR, src.TRANSPORT_CHARGE_PAYMENT, src.COMM_REF_NUMBER, src.SECURITY_INDICATOR, src.CONVEY_REF_NUMBER, src.PLAC_UNLOAD_CODE, src.SEC_CONSIGNEE_TRAD_SID, src.SEC_CONSIGNEE_TRADS_SID, src.SEC_CONSIGNOR_TRADS_SID, src.SEC_CONSIGNOR_TRAD_SID, src.SEC_CARRIER_TRADS_SID, src.SEC_CARRIER_TRAD_SID);
		SET @Merged = 1;
	END

	IF @TableName = 'DECL_TYP' BEGIN
		MERGE INTO ncts.DECL_TYP AS tgt
		USING [WI_StageODS].ncts.DECL_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'DECL_TYP_NAM' BEGIN
		DELETE FROM ncts.DECL_TYP_NAM
		MERGE INTO ncts.DECL_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.DECL_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DECL_TYP_ID=src.DECL_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (DECL_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.DECL_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'DOC_TYP' BEGIN
		MERGE INTO ncts.DOC_TYP AS tgt
		USING [WI_StageODS].ncts.DOC_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.COMM_DOM=src.COMM_DOM, tgt.SENT=src.SENT, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END, tgt.TRANSIT_DOCUMENT=src.TRANSIT_DOCUMENT
		WHEN NOT MATCHED
		THEN INSERT (ID, COMM_DOM, SENT, DAT_START, DAT_END, TRANSIT_DOCUMENT)
		VALUES (src.ID, src.COMM_DOM, src.SENT, src.DAT_START, src.DAT_END, src.TRANSIT_DOCUMENT);
		SET @Merged = 1;
	END

	IF @TableName = 'DOC_TYP_NAM' BEGIN
		DELETE from ncts.DOC_TYP_NAM
		MERGE INTO ncts.DOC_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.DOC_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DOC_TYP_ID=src.DOC_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START
		WHEN NOT MATCHED
		THEN INSERT (DOC_TYP_ID, LANG_ID, NAM, DAT_END, DAT_START)
		VALUES (src.DOC_TYP_ID, src.LANG_ID, src.NAM, src.DAT_END, src.DAT_START);
		SET @Merged = 1;
	END

	IF @TableName = 'EN_ROUT_EVENT' BEGIN
		MERGE INTO ncts.EN_ROUT_EVENT AS tgt
		USING [WI_StageODS].ncts.EN_ROUT_EVENT AS src
		ON (tgt.MRN=src.MRN and tgt.SEQ=src.SEQ)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ARR_NOT_EVENT=src.ARR_NOT_EVENT, tgt.PLAC=src.PLAC, tgt.PLAC_LNG=src.PLAC_LNG, tgt.NUMB_OF_SEALS=src.NUMB_OF_SEALS, tgt.AL_IN_NCTS=src.AL_IN_NCTS, tgt.USER_ID=src.USER_ID, tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.COUNTRY_ID=src.COUNTRY_ID
		WHEN NOT MATCHED
		THEN INSERT (ARR_NOT_EVENT, MRN, SEQ, PLAC, PLAC_LNG, NUMB_OF_SEALS, AL_IN_NCTS, USER_ID, CUST_OFF_ID, COUNTRY_ID)
		VALUES (src.ARR_NOT_EVENT, src.MRN, src.SEQ, src.PLAC, src.PLAC_LNG, src.NUMB_OF_SEALS, src.AL_IN_NCTS, src.USER_ID, src.CUST_OFF_ID, src.COUNTRY_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'EN_ROUT_EVENT_DET' BEGIN
		DELETE FROM ncts.EN_ROUT_EVENT_DET
		MERGE INTO ncts.EN_ROUT_EVENT_DET AS tgt
		USING [WI_StageODS].ncts.EN_ROUT_EVENT_DET AS src
		ON(tgt.MRN = src.MRN AND tgt.INC_IND = src.INC_IND AND tgt.EN_ROUT_EVENT_SEQ = src.EN_ROUT_EVENT_SEQ)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.INC_FLAG=src.INC_FLAG, tgt.INC_IND=src.INC_IND, tgt.EN_ROUT_EVENT_SEQ=src.EN_ROUT_EVENT_SEQ, tgt.MRN=src.MRN, tgt.NEW_TRANSP_MEANS_IDENT=src.NEW_TRANSP_MEANS_IDENT, tgt.NEW_TRANSP_MEANS_IDENT_LNG=src.NEW_TRANSP_MEANS_IDENT_LNG, tgt.NEW_TRANSP_MEANS_NAT=src.NEW_TRANSP_MEANS_NAT, tgt.INC_INF=src.INC_INF, tgt.INC_INF_LNG=src.INC_INF_LNG, tgt.ENDORS_AUTH=src.ENDORS_AUTH, tgt.ENDORS_AUTH_LNG=src.ENDORS_AUTH_LNG, tgt.DAT_ENDORS=src.DAT_ENDORS, tgt.ENDORS_PLAC=src.ENDORS_PLAC, tgt.ENDORS_PLAC_LNG=src.ENDORS_PLAC_LNG, tgt.ENDORS_COUNTRY_ID=src.ENDORS_COUNTRY_ID
		WHEN NOT MATCHED
		THEN INSERT (INC_FLAG, INC_IND, EN_ROUT_EVENT_SEQ, MRN, NEW_TRANSP_MEANS_IDENT, NEW_TRANSP_MEANS_IDENT_LNG, NEW_TRANSP_MEANS_NAT, INC_INF, INC_INF_LNG, ENDORS_AUTH, ENDORS_AUTH_LNG, DAT_ENDORS, ENDORS_PLAC, ENDORS_PLAC_LNG, ENDORS_COUNTRY_ID)
		VALUES (src.INC_FLAG, src.INC_IND, src.EN_ROUT_EVENT_SEQ, src.MRN, src.NEW_TRANSP_MEANS_IDENT, src.NEW_TRANSP_MEANS_IDENT_LNG, src.NEW_TRANSP_MEANS_NAT, src.INC_INF, src.INC_INF_LNG, src.ENDORS_AUTH, src.ENDORS_AUTH_LNG, src.DAT_ENDORS, src.ENDORS_PLAC, src.ENDORS_PLAC_LNG, src.ENDORS_COUNTRY_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_COMM' BEGIN
		MERGE INTO ncts.ENQ_COMM AS tgt
		USING [WI_StageODS].ncts.ENQ_COMM AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.MRN=src.MRN, tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.DEP_CUST_OFF_ID=src.DEP_CUST_OFF_ID, tgt.COMP_AUTH_OFF_ID=src.COMP_AUTH_OFF_ID, tgt.DAT_CAN=src.DAT_CAN, tgt.REMARKS=src.REMARKS, tgt.INF_AVAIL=src.INF_AVAIL, tgt.TCR=src.TCR, tgt.DAT_ENQ=src.DAT_ENQ, tgt.DAT_DEL=src.DAT_DEL, tgt.ENQ_ENGAGED=src.ENQ_ENGAGED, tgt.DAT_ENQ_RESP=src.DAT_ENQ_RESP, tgt.MOV_UNKNOWN=src.MOV_UNKNOWN, tgt.DAT_RET_COPY=src.DAT_RET_COPY, tgt.DAT_TIM_EXP=src.DAT_TIM_EXP, tgt.DAT_ENQ_ANS=src.DAT_ENQ_ANS, tgt.COUNTRY_ID=src.COUNTRY_ID, tgt.CITY=src.CITY, tgt.NAM=src.NAM, tgt.POST_COD=src.POST_COD, tgt.STR_AND_NUMB=src.STR_AND_NUMB, tgt.TIN=src.TIN, tgt.ENQ_OPEN=src.ENQ_OPEN, tgt.COUNTER_REQS=src.COUNTER_REQS, tgt.DAT_ENQ_RCY=src.DAT_ENQ_RCY
		WHEN NOT MATCHED
		THEN INSERT (SID, MRN, CUST_OFF_ID, DEP_CUST_OFF_ID, COMP_AUTH_OFF_ID, DAT_CAN, REMARKS, INF_AVAIL, TCR, DAT_ENQ, DAT_DEL, ENQ_ENGAGED, DAT_ENQ_RESP, MOV_UNKNOWN, DAT_RET_COPY, DAT_TIM_EXP, DAT_ENQ_ANS, COUNTRY_ID, CITY, NAM, POST_COD, STR_AND_NUMB, TIN, ENQ_OPEN, COUNTER_REQS, DAT_ENQ_RCY)
		VALUES (src.SID, src.MRN, src.CUST_OFF_ID, src.DEP_CUST_OFF_ID, src.COMP_AUTH_OFF_ID, src.DAT_CAN, src.REMARKS, src.INF_AVAIL, src.TCR, src.DAT_ENQ, src.DAT_DEL, src.ENQ_ENGAGED, src.DAT_ENQ_RESP, src.MOV_UNKNOWN, src.DAT_RET_COPY, src.DAT_TIM_EXP, src.DAT_ENQ_ANS, src.COUNTRY_ID, src.CITY, src.NAM, src.POST_COD, src.STR_AND_NUMB, src.TIN, src.ENQ_OPEN, src.COUNTER_REQS, src.DAT_ENQ_RCY);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_INF_COD_TYP' BEGIN
		MERGE INTO ncts.ENQ_INF_COD_TYP AS tgt
		USING [WI_StageODS].ncts.ENQ_INF_COD_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_INF_COD_TYP_NAM' BEGIN
		DELETE FROM ncts.ENQ_INF_COD_TYP_NAM
		MERGE INTO ncts.ENQ_INF_COD_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.ENQ_INF_COD_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ENQ_INF_COD_TYP_ID=src.ENQ_INF_COD_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ENQ_INF_COD_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.ENQ_INF_COD_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_INF_REQ' BEGIN
		MERGE INTO ncts.ENQ_INF_REQ AS tgt
		USING [WI_StageODS].ncts.ENQ_INF_REQ AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.ADD_INF_REQ_TYP_ID=src.ADD_INF_REQ_TYP_ID, tgt.ENQ_COMM_SID=src.ENQ_COMM_SID, tgt.TEXT=src.TEXT, tgt.DAT_REQ=src.DAT_REQ, tgt.COUNTER_REQ=src.COUNTER_REQ
		WHEN NOT MATCHED
		THEN INSERT (CUST_OFF_ID, ADD_INF_REQ_TYP_ID, ENQ_COMM_SID, SID, TEXT, DAT_REQ, COUNTER_REQ)
		VALUES (src.CUST_OFF_ID, src.ADD_INF_REQ_TYP_ID, src.ENQ_COMM_SID, src.SID, src.TEXT, src.DAT_REQ, src.COUNTER_REQ);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_INF_RESP' BEGIN
		MERGE INTO ncts.ENQ_INF_RESP AS tgt
		USING [WI_StageODS].ncts.ENQ_INF_RESP AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.ENQ_COMM_SID=src.ENQ_COMM_SID, tgt.ADD_INF_RESP_TYP_ID=src.ADD_INF_RESP_TYP_ID, tgt.TEXT=src.TEXT, tgt.DAT_RESP=src.DAT_RESP, tgt.COUNTER_REQ=src.COUNTER_REQ
		WHEN NOT MATCHED
		THEN INSERT (CUST_OFF_ID, ENQ_COMM_SID, SID, ADD_INF_RESP_TYP_ID, TEXT, DAT_RESP, COUNTER_REQ)
		VALUES (src.CUST_OFF_ID, src.ENQ_COMM_SID, src.SID, src.ADD_INF_RESP_TYP_ID, src.TEXT, src.DAT_RESP, src.COUNTER_REQ);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_REM' BEGIN
		MERGE INTO ncts.ENQ_REM AS tgt
		USING [WI_StageODS].ncts.ENQ_REM AS src
		ON (tgt.DAT_ENQ_REM=src.DAT_ENQ_REM and tgt.ENQ_COMM_SID=src.ENQ_COMM_SID and tgt.HIGH_AUTH_OFF_ID=src.HIGH_AUTH_OFF_ID)
		WHEN NOT MATCHED
		THEN INSERT (DAT_ENQ_REM, ENQ_COMM_SID, HIGH_AUTH_OFF_ID)
		VALUES (src.DAT_ENQ_REM, src.ENQ_COMM_SID, src.HIGH_AUTH_OFF_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_REQ_INF_COD_TYP' BEGIN
		MERGE INTO ncts.ENQ_REQ_INF_COD_TYP AS tgt
		USING [WI_StageODS].ncts.ENQ_REQ_INF_COD_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_REQ_INF_COD_TYP_NAM' BEGIN
		DELETE FROM ncts.ENQ_REQ_INF_COD_TYP_NAM
		MERGE INTO ncts.ENQ_REQ_INF_COD_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.ENQ_REQ_INF_COD_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ENQ_REQ_INF_COD_TYP_ID=src.ENQ_REQ_INF_COD_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ENQ_REQ_INF_COD_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.ENQ_REQ_INF_COD_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_RESP_COD_TYP' BEGIN
		MERGE INTO ncts.ENQ_RESP_COD_TYP AS tgt
		USING [WI_StageODS].ncts.ENQ_RESP_COD_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQ_RESP_COD_TYP_NAM' BEGIN
		DELETE FROM ncts.ENQ_RESP_COD_TYP_NAM
		MERGE INTO ncts.ENQ_RESP_COD_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.ENQ_RESP_COD_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ENQ_RESP_COD_TYP_ID=src.ENQ_RESP_COD_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ENQ_RESP_COD_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.ENQ_RESP_COD_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'CUST_OFF_INF' BEGIN
		MERGE INTO ncts.CUST_OFF_INF AS tgt
		USING WI_StageODS.ncts.CUST_OFF_INF AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.SID=src.SID, tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.ADDRESS=src.ADDRESS, tgt.CONT_PERSON=src.CONT_PERSON
		WHEN NOT MATCHED
		THEN INSERT (SID, CUST_OFF_ID, ADDRESS, CONT_PERSON)
		VALUES (src.SID, src.CUST_OFF_ID, src.ADDRESS, src.CONT_PERSON);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQUIRY_INF' BEGIN
		MERGE INTO ncts.ENQUIRY_INF AS tgt
		USING [WI_StageODS].ncts.ENQUIRY_INF AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.MRN=src.MRN, tgt.REQ_CUST_OFF_INF_SID=src.REQ_CUST_OFF_INF_SID, tgt.CMP_DEP_CUST_OFF_INF_SID=src.CMP_DEP_CUST_OFF_INF_SID, tgt.CMP_DES_CUST_OFF_INF_SID=src.CMP_DES_CUST_OFF_INF_SID, tgt.ENQ_DATE=src.ENQ_DATE, tgt.INF_FROM_PRINCIPAL=src.INF_FROM_PRINCIPAL
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, MRN, REQ_CUST_OFF_INF_SID, CMP_DEP_CUST_OFF_INF_SID, CMP_DES_CUST_OFF_INF_SID, ENQ_DATE, INF_FROM_PRINCIPAL)
		VALUES (src.SID, src.TRANS_OPER_SID, src.MRN, src.REQ_CUST_OFF_INF_SID, src.CMP_DEP_CUST_OFF_INF_SID, src.CMP_DES_CUST_OFF_INF_SID, src.ENQ_DATE, src.INF_FROM_PRINCIPAL);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQUIRY_INF_DET' BEGIN
		MERGE INTO ncts.ENQUIRY_INF_DET AS tgt
		USING [WI_StageODS].ncts.ENQUIRY_INF_DET AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ENQUIRY_INF_SID=src.ENQUIRY_INF_SID, tgt.ENQ_INF_COD_TYP_ID=src.ENQ_INF_COD_TYP_ID, tgt.ENQ_INF_TEXT=src.ENQ_INF_TEXT
		WHEN NOT MATCHED
		THEN INSERT (SID, ENQUIRY_INF_SID, ENQ_INF_COD_TYP_ID, ENQ_INF_TEXT)
		VALUES (src.SID, src.ENQUIRY_INF_SID, src.ENQ_INF_COD_TYP_ID, src.ENQ_INF_TEXT);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQUIRY_INF_REQ' BEGIN
		MERGE INTO ncts.ENQUIRY_INF_REQ AS tgt
		USING [WI_StageODS].ncts.ENQUIRY_INF_REQ AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.MRN=src.MRN, tgt.CMP_DEP_CUST_OFF_INF_SID=src.CMP_DEP_CUST_OFF_INF_SID, tgt.CMP_DES_CUST_OFF_INF_SID=src.CMP_DES_CUST_OFF_INF_SID, tgt.ENQ_DATE=src.ENQ_DATE
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, MRN, CMP_DEP_CUST_OFF_INF_SID, CMP_DES_CUST_OFF_INF_SID, ENQ_DATE)
		VALUES (src.SID, src.TRANS_OPER_SID, src.MRN, src.CMP_DEP_CUST_OFF_INF_SID, src.CMP_DES_CUST_OFF_INF_SID, src.ENQ_DATE);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQUIRY_INF_REQ_DET' BEGIN
		MERGE INTO ncts.ENQUIRY_INF_REQ_DET AS tgt
		USING [WI_StageODS].ncts.ENQUIRY_INF_REQ_DET AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ENQUIRY_INF_REQ_SID=src.ENQUIRY_INF_REQ_SID, tgt.ENQ_REQ_INF_COD_TYP_ID=src.ENQ_REQ_INF_COD_TYP_ID, tgt.ENQ_REQ_INF_TEXT=src.ENQ_REQ_INF_TEXT
		WHEN NOT MATCHED
		THEN INSERT (SID, ENQUIRY_INF_REQ_SID, ENQ_REQ_INF_COD_TYP_ID, ENQ_REQ_INF_TEXT)
		VALUES (src.SID, src.ENQUIRY_INF_REQ_SID, src.ENQ_REQ_INF_COD_TYP_ID, src.ENQ_REQ_INF_TEXT);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQUIRY_REQUEST' BEGIN
		MERGE INTO ncts.ENQUIRY_REQUEST AS tgt
		USING [WI_StageODS].ncts.ENQUIRY_REQUEST AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.MRN=src.MRN, tgt.DEP_CUST_OFF_ID=src.DEP_CUST_OFF_ID, tgt.CMP_CUST_OFF_ID=src.CMP_CUST_OFF_ID, tgt.REQ_CUST_OFF_ID=src.REQ_CUST_OFF_ID, tgt.ENQ_DATE=src.ENQ_DATE, tgt.TCC_DELIVERED=src.TCC_DELIVERED, tgt.DEL_DATE_TC11=src.DEL_DATE_TC11, tgt.INFO_TEXT=src.INFO_TEXT, tgt.INFO_AVAILABLE=src.INFO_AVAILABLE, tgt.ACT_CONS_TRAD_SID=src.ACT_CONS_TRAD_SID, tgt.ACT_CONS_TRADS_SID=src.ACT_CONS_TRADS_SID, tgt.ACT_CONS_TRAD_TIN=src.ACT_CONS_TRAD_TIN, tgt.CONT_PERSON=src.CONT_PERSON, tgt.RESP_RECEIVED=src.RESP_RECEIVED, tgt.TIMER_EXPIRED=src.TIMER_EXPIRED
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, MRN, DEP_CUST_OFF_ID, CMP_CUST_OFF_ID, REQ_CUST_OFF_ID, ENQ_DATE, TCC_DELIVERED, DEL_DATE_TC11, INFO_TEXT, INFO_AVAILABLE, ACT_CONS_TRAD_SID, ACT_CONS_TRADS_SID, ACT_CONS_TRAD_TIN, CONT_PERSON, RESP_RECEIVED, TIMER_EXPIRED)
		VALUES (src.SID, src.TRANS_OPER_SID, src.MRN, src.DEP_CUST_OFF_ID, src.CMP_CUST_OFF_ID, src.REQ_CUST_OFF_ID, src.ENQ_DATE, src.TCC_DELIVERED, src.DEL_DATE_TC11, src.INFO_TEXT, src.INFO_AVAILABLE, src.ACT_CONS_TRAD_SID, src.ACT_CONS_TRADS_SID, src.ACT_CONS_TRAD_TIN, src.CONT_PERSON, src.RESP_RECEIVED, src.TIMER_EXPIRED);
		SET @Merged = 1;
	END

	IF @TableName = 'ENQUIRY_RESPONSE' BEGIN
		MERGE INTO ncts.ENQUIRY_RESPONSE AS tgt
		USING [WI_StageODS].ncts.ENQUIRY_RESPONSE AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ENQUIRY_REQUEST_SID=src.ENQUIRY_REQUEST_SID, tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.MRN=src.MRN, tgt.CMP_CUST_OFF_ID=src.CMP_CUST_OFF_ID, tgt.REQ_CUST_OFF_ID=src.REQ_CUST_OFF_ID, tgt.ENQ_RESP_DATE=src.ENQ_RESP_DATE, tgt.RET_COPY_DATE=src.RET_COPY_DATE, tgt.RESP_CODE=src.RESP_CODE, tgt.RESP_INFO=src.RESP_INFO, tgt.INFO_TEXT=src.INFO_TEXT, tgt.INFO_AVAILABLE=src.INFO_AVAILABLE, tgt.CONT_PERSON=src.CONT_PERSON
		WHEN NOT MATCHED
		THEN INSERT (SID, ENQUIRY_REQUEST_SID, TRANS_OPER_SID, MRN, CMP_CUST_OFF_ID, REQ_CUST_OFF_ID, ENQ_RESP_DATE, RET_COPY_DATE, RESP_CODE, RESP_INFO, INFO_TEXT, INFO_AVAILABLE, CONT_PERSON)
		VALUES (src.SID, src.ENQUIRY_REQUEST_SID, src.TRANS_OPER_SID, src.MRN, src.CMP_CUST_OFF_ID, src.REQ_CUST_OFF_ID, src.ENQ_RESP_DATE, src.RET_COPY_DATE, src.RESP_CODE, src.RESP_INFO, src.INFO_TEXT, src.INFO_AVAILABLE, src.CONT_PERSON);
		SET @Merged = 1;
	END

	IF @TableName = 'GUARANTEE_I' BEGIN
		MERGE INTO ncts.GUARANTEE_I AS tgt
		USING [WI_StageODS].ncts.GUARANTEE_I AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.VERS_NUMB=src.VERS_NUMB, tgt.GUARANTEE_TYP_ID=src.GUARANTEE_TYP_ID
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, VERS_NUMB, GUARANTEE_TYP_ID)
		VALUES (src.SID, src.TRANS_OPER_SID, src.VERS_NUMB, src.GUARANTEE_TYP_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'GUARANTEE_REF' BEGIN
		MERGE INTO ncts.GUARANTEE_REF AS tgt
		USING [WI_StageODS].ncts.GUARANTEE_REF AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.GUARANTEE_I_SID=src.GUARANTEE_I_SID, tgt.GRN=src.GRN, tgt.OTH_REF=src.OTH_REF, tgt.ACC_COD=src.ACC_COD, tgt.INV_FOR_EC=src.INV_FOR_EC, tgt.GUARANTEE_AMOUNT=src.GUARANTEE_AMOUNT, tgt.CURRENCY=src.CURRENCY, tgt.GUA_CUST_OFF_ID=src.GUA_CUST_OFF_ID, tgt.COUNTRY_ID=src.COUNTRY_ID, tgt.USAGE_STATUS=src.USAGE_STATUS, tgt.USAGE_REJ_CODES=src.USAGE_REJ_CODES, tgt.DAT_REL=src.DAT_REL, tgt.DAT_CAN=src.DAT_CAN, tgt.DAT_CHECK_REQ=src.DAT_CHECK_REQ, tgt.DAT_CHECK_RESP=src.DAT_CHECK_RESP, tgt.CHECK_RESULT=src.CHECK_RESULT, tgt.CHECK_STATUS=src.CHECK_STATUS
		WHEN NOT MATCHED
		THEN INSERT (SID, GUARANTEE_I_SID, GRN, OTH_REF, ACC_COD, INV_FOR_EC, GUARANTEE_AMOUNT, CURRENCY, GUA_CUST_OFF_ID, COUNTRY_ID, USAGE_STATUS, USAGE_REJ_CODES, DAT_REL, DAT_CAN, DAT_CHECK_REQ, DAT_CHECK_RESP, CHECK_RESULT, CHECK_STATUS)
		VALUES (src.SID, src.GUARANTEE_I_SID, src.GRN, src.OTH_REF, src.ACC_COD, src.INV_FOR_EC, src.GUARANTEE_AMOUNT, src.CURRENCY, src.GUA_CUST_OFF_ID, src.COUNTRY_ID, src.USAGE_STATUS, src.USAGE_REJ_CODES, src.DAT_REL, src.DAT_CAN, src.DAT_CHECK_REQ, src.DAT_CHECK_RESP, src.CHECK_RESULT, src.CHECK_STATUS);
		SET @Merged = 1;
	END

	IF @TableName = 'GUARANTEE_TYP' BEGIN
		MERGE INTO ncts.GUARANTEE_TYP AS tgt
		USING [WI_StageODS].ncts.GUARANTEE_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'GUARANTEE_TYP_NAM' BEGIN
		DELETE FROM ncts.GUARANTEE_TYP_NAM
		MERGE INTO ncts.GUARANTEE_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.GUARANTEE_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.GUARANTEE_TYP_ID=src.GUARANTEE_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START
		WHEN NOT MATCHED
		THEN INSERT (GUARANTEE_TYP_ID, LANG_ID, NAM, DAT_END, DAT_START)
		VALUES (src.GUARANTEE_TYP_ID, src.LANG_ID, src.NAM, src.DAT_END, src.DAT_START);
		SET @Merged = 1;
	END

	IF @TableName = 'GUARANTEE_VAL_LIM' BEGIN
		MERGE INTO ncts.GUARANTEE_VAL_LIM AS tgt
		USING [WI_StageODS].ncts.GUARANTEE_VAL_LIM AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.GUARANTEE_REF_SID=src.GUARANTEE_REF_SID, tgt.COUNTRY_ID=src.COUNTRY_ID
		WHEN NOT MATCHED
		THEN INSERT (SID, GUARANTEE_REF_SID, COUNTRY_ID)
		VALUES (src.SID, src.GUARANTEE_REF_SID, src.COUNTRY_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'INV_GUARANTEE_REAS' BEGIN
		MERGE INTO ncts.INV_GUARANTEE_REAS AS tgt
		USING [WI_StageODS].ncts.INV_GUARANTEE_REAS AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'INV_GUARANTEE_REAS_NAM' BEGIN
		DELETE FROM ncts.INV_GUARANTEE_REAS_NAM
		MERGE INTO ncts.INV_GUARANTEE_REAS_NAM AS tgt
		USING [WI_StageODS].ncts.INV_GUARANTEE_REAS_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.INV_GUARANTEE_REAS_ID=src.INV_GUARANTEE_REAS_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (INV_GUARANTEE_REAS_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.INV_GUARANTEE_REAS_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'ITINERARY' BEGIN
		DELETE FROM ncts.ITINERARY
		MERGE INTO ncts.ITINERARY AS tgt
		USING [WI_StageODS].ncts.ITINERARY AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.SID=src.SID, tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.VERS_NUMB=src.VERS_NUMB, tgt.COUNTRY_ID=src.COUNTRY_ID
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, VERS_NUMB, COUNTRY_ID)
		VALUES (src.SID, src.TRANS_OPER_SID, src.VERS_NUMB, src.COUNTRY_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'LANG' BEGIN
		MERGE INTO ncts.LANG AS tgt
		USING [WI_StageODS].ncts.LANG AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'LANG_NAM' BEGIN
		DELETE FROM ncts.LANG_NAM
		MERGE INTO ncts.LANG_NAM AS tgt
		USING [WI_StageODS].ncts.LANG_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.LANG_ID=src.LANG_ID, tgt.IN_LANG_ID=src.IN_LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (LANG_ID, IN_LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.LANG_ID, src.IN_LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'OFF_ROL_TYP' BEGIN
		MERGE INTO ncts.OFF_ROL_TYP AS tgt
		USING [WI_StageODS].ncts.OFF_ROL_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'OFF_ROL_TYP_DESCR' BEGIN
		DELETE FROM ncts.OFF_ROL_TYP_DESCR
		MERGE INTO ncts.OFF_ROL_TYP_DESCR AS tgt
		USING [WI_StageODS].ncts.OFF_ROL_TYP_DESCR AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.OFF_ROL_TYP_ID=src.OFF_ROL_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.DESCR=src.DESCR, tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START
		WHEN NOT MATCHED
		THEN INSERT (OFF_ROL_TYP_ID, LANG_ID, DESCR, DAT_END, DAT_START)
		VALUES (src.OFF_ROL_TYP_ID, src.LANG_ID, src.DESCR, src.DAT_END, src.DAT_START);
		SET @Merged = 1;
	END

	IF @TableName = 'PACK_TYP' BEGIN
		MERGE INTO ncts.PACK_TYP AS tgt
		USING [WI_StageODS].ncts.PACK_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'PACK_TYP_NAM' BEGIN
		DELETE FROM ncts.PACK_TYP_NAM
		MERGE INTO ncts.PACK_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.PACK_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.PACK_TYP_ID=src.PACK_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START
		WHEN NOT MATCHED
		THEN INSERT (PACK_TYP_ID, LANG_ID, NAM, DAT_END, DAT_START)
		VALUES (src.PACK_TYP_ID, src.LANG_ID, src.NAM, src.DAT_END, src.DAT_START);
		SET @Merged = 1;
	END

	IF @TableName = 'RECOVERY_ACCEPTANCE' BEGIN
		MERGE INTO ncts.RECOVERY_ACCEPTANCE AS tgt
		USING [WI_StageODS].ncts.RECOVERY_ACCEPTANCE AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.MRN=src.MRN, tgt.CMP_REQUESTING_CUST_OFF_ID=src.CMP_REQUESTING_CUST_OFF_ID, tgt.CMP_REQUESTED_CUST_OFF_ID=src.CMP_REQUESTED_CUST_OFF_ID, tgt.INFO_TEXT=src.INFO_TEXT, tgt.INFO_AVAILABLE=src.INFO_AVAILABLE, tgt.CONT_PERSON=src.CONT_PERSON, tgt.COMM_DATE=src.COMM_DATE, tgt.ACCEPTANCE=src.ACCEPTANCE
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, MRN, CMP_REQUESTING_CUST_OFF_ID, CMP_REQUESTED_CUST_OFF_ID, INFO_TEXT, INFO_AVAILABLE, CONT_PERSON, COMM_DATE, ACCEPTANCE)
		VALUES (src.SID, src.TRANS_OPER_SID, src.MRN, src.CMP_REQUESTING_CUST_OFF_ID, src.CMP_REQUESTED_CUST_OFF_ID, src.INFO_TEXT, src.INFO_AVAILABLE, src.CONT_PERSON, src.COMM_DATE, src.ACCEPTANCE);
		SET @Merged = 1;
	END

	IF @TableName = 'RECOVERY_DISPATCH' BEGIN
		MERGE INTO ncts.RECOVERY_DISPATCH AS tgt
		USING [WI_StageODS].ncts.RECOVERY_DISPATCH AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.MRN=src.MRN, tgt.CMP_REQUESTING_CUST_OFF_ID=src.CMP_REQUESTING_CUST_OFF_ID, tgt.CMP_REQUESTED_CUST_OFF_ID=src.CMP_REQUESTED_CUST_OFF_ID, tgt.INFO_TEXT=src.INFO_TEXT, tgt.CONT_PERSON=src.CONT_PERSON, tgt.COLLECTION_DATE=src.COLLECTION_DATE
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, MRN, CMP_REQUESTING_CUST_OFF_ID, CMP_REQUESTED_CUST_OFF_ID, INFO_TEXT, CONT_PERSON, COLLECTION_DATE)
		VALUES (src.SID, src.TRANS_OPER_SID, src.MRN, src.CMP_REQUESTING_CUST_OFF_ID, src.CMP_REQUESTED_CUST_OFF_ID, src.INFO_TEXT, src.CONT_PERSON, src.COLLECTION_DATE);
		SET @Merged = 1;
	END

	IF @TableName = 'RECOVERY_GUARANTEE' BEGIN
		MERGE INTO ncts.RECOVERY_GUARANTEE AS tgt
		USING [WI_StageODS].ncts.RECOVERY_GUARANTEE AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.GRN=src.GRN, tgt.RECOVERY_ACCEPTANCE_SID=src.RECOVERY_ACCEPTANCE_SID, tgt.RECOVERY_REQUEST_SID=src.RECOVERY_REQUEST_SID
		WHEN NOT MATCHED
		THEN INSERT (SID, GRN, RECOVERY_ACCEPTANCE_SID, RECOVERY_REQUEST_SID)
		VALUES (src.SID, src.GRN, src.RECOVERY_ACCEPTANCE_SID, src.RECOVERY_REQUEST_SID);
		SET @Merged = 1;
	END

	IF @TableName = 'RECOVERY_GUARANTOR' BEGIN
		MERGE INTO ncts.RECOVERY_GUARANTOR AS tgt
		USING [WI_StageODS].ncts.RECOVERY_GUARANTOR AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CITY=src.CITY, tgt.NAM=src.NAM, tgt.POST_COD=src.POST_COD, tgt.STR_AND_NUMB=src.STR_AND_NUMB, tgt.CONTACT_DETAILS=src.CONTACT_DETAILS, tgt.RECOVERY_ACCEPTANCE_SID=src.RECOVERY_ACCEPTANCE_SID, tgt.RECOVERY_REQUEST_SID=src.RECOVERY_REQUEST_SID, tgt.GUARANTOR_TIN=src.GUARANTOR_TIN
		WHEN NOT MATCHED
		THEN INSERT (SID, CITY, NAM, POST_COD, STR_AND_NUMB, CONTACT_DETAILS, RECOVERY_ACCEPTANCE_SID, RECOVERY_REQUEST_SID, GUARANTOR_TIN)
		VALUES (src.SID, src.CITY, src.NAM, src.POST_COD, src.STR_AND_NUMB, src.CONTACT_DETAILS, src.RECOVERY_ACCEPTANCE_SID, src.RECOVERY_REQUEST_SID, src.GUARANTOR_TIN);
		SET @Merged = 1;
	END

	IF @TableName = 'RECOVERY_REQUEST' BEGIN
		MERGE INTO ncts.RECOVERY_REQUEST AS tgt
		USING [WI_StageODS].ncts.RECOVERY_REQUEST AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.MRN=src.MRN, tgt.CMP_REQUESTING_CUST_OFF_ID=src.CMP_REQUESTING_CUST_OFF_ID, tgt.CMP_REQUESTED_CUST_OFF_ID=src.CMP_REQUESTED_CUST_OFF_ID, tgt.INFO_TEXT=src.INFO_TEXT, tgt.CONT_PERSON=src.CONT_PERSON, tgt.COMM_DATE=src.COMM_DATE, tgt.REQUESTED=src.REQUESTED, tgt.RESPONSE_RECEIVED=src.RESPONSE_RECEIVED, tgt.TIMER_EXPIRED=src.TIMER_EXPIRED
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, MRN, CMP_REQUESTING_CUST_OFF_ID, CMP_REQUESTED_CUST_OFF_ID, INFO_TEXT, CONT_PERSON, COMM_DATE, REQUESTED, RESPONSE_RECEIVED, TIMER_EXPIRED)
		VALUES (src.SID, src.TRANS_OPER_SID, src.MRN, src.CMP_REQUESTING_CUST_OFF_ID, src.CMP_REQUESTED_CUST_OFF_ID, src.INFO_TEXT, src.CONT_PERSON, src.COMM_DATE, src.REQUESTED, src.RESPONSE_RECEIVED, src.TIMER_EXPIRED);
		SET @Merged = 1;
	END

	IF @TableName = 'RISK_ANA_TYP' BEGIN
		MERGE INTO ncts.RISK_ANA_TYP AS tgt
		USING [WI_StageODS].ncts.RISK_ANA_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'RISK_ANA_TYP_NAM' BEGIN
		DELETE FROM ncts.RISK_ANA_TYP_NAM
		MERGE INTO ncts.RISK_ANA_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.RISK_ANA_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.RISK_ANA_TYP_ID=src.RISK_ANA_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (RISK_ANA_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.RISK_ANA_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'RISK_ANA_TYP_NAM_PL' BEGIN
		DELETE from ncts.RISK_ANA_TYP_NAM_PL
		MERGE INTO ncts.RISK_ANA_TYP_NAM_PL AS tgt
		USING [WI_StageODS].ncts.RISK_ANA_TYP_NAM_PL AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.RISK_ANA_TYP_ID=src.RISK_ANA_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (RISK_ANA_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.RISK_ANA_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'RISK_ANA_TYP_NAM_PL_100' BEGIN
		DELETE FROM ncts.RISK_ANA_TYP_NAM_PL_100
		MERGE INTO ncts.RISK_ANA_TYP_NAM_PL_100 AS tgt
		USING [WI_StageODS].ncts.RISK_ANA_TYP_NAM_PL_100 AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.RISK_ANA_TYP_ID=src.RISK_ANA_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (RISK_ANA_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.RISK_ANA_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'RISK_ANA_TYP_NAM_PL_234' BEGIN
		DELETE FROM ncts.RISK_ANA_TYP_NAM_PL_234
		MERGE INTO ncts.RISK_ANA_TYP_NAM_PL_234 AS tgt
		USING [WI_StageODS].ncts.RISK_ANA_TYP_NAM_PL_234 AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.RISK_ANA_TYP_ID=src.RISK_ANA_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (RISK_ANA_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.RISK_ANA_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'RISK_ANA_TYP_NAM_PL_305' BEGIN
		DELETE FROM ncts.RISK_ANA_TYP_NAM_PL_305
		MERGE INTO ncts.RISK_ANA_TYP_NAM_PL_305 AS tgt
		USING [WI_StageODS].ncts.RISK_ANA_TYP_NAM_PL_305 AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.RISK_ANA_TYP_ID=src.RISK_ANA_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (RISK_ANA_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.RISK_ANA_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'SEAL_DET' BEGIN
		MERGE INTO ncts.SEAL_DET AS tgt
		USING [WI_StageODS].ncts.SEAL_DET AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.VERS_NUMB=src.VERS_NUMB, tgt.SEAL_IDENT=src.SEAL_IDENT, tgt.SEAL_IDENT_LNG=src.SEAL_IDENT_LNG, tgt.RE_USE=src.RE_USE, tgt.TRANS_OPER_UNL_MRN=src.TRANS_OPER_UNL_MRN, tgt.EN_ROUT_EVENT_MRN=src.EN_ROUT_EVENT_MRN, tgt.EN_ROUT_EVENT_SEQ=src.EN_ROUT_EVENT_SEQ, tgt.DEP_TRANS_OPER_MRN=src.DEP_TRANS_OPER_MRN, tgt.FROM_HS_GOODS_CLASS_ID=src.FROM_HS_GOODS_CLASS_ID, tgt.FROM_CN_GOODS_CLASS_ID=src.FROM_CN_GOODS_CLASS_ID, tgt.FROM_SENS_GOODS_CLASS_ID=src.FROM_SENS_GOODS_CLASS_ID, tgt.TO_HS_GOODS_CLASS_ID=src.TO_HS_GOODS_CLASS_ID, tgt.TO_CN_GOODS_CLASS_ID=src.TO_CN_GOODS_CLASS_ID, tgt.TO_SENS_GOODS_CLASS_ID=src.TO_SENS_GOODS_CLASS_ID, tgt.CUST_OFF_ADDR_SID=src.CUST_OFF_ADDR_SID, tgt.TRAD_SP_AUTH_SID=src.TRAD_SP_AUTH_SID, tgt.UNL_VERS_NUMB=src.UNL_VERS_NUMB
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, VERS_NUMB, SEAL_IDENT, SEAL_IDENT_LNG, RE_USE, TRANS_OPER_UNL_MRN, EN_ROUT_EVENT_MRN, EN_ROUT_EVENT_SEQ, DEP_TRANS_OPER_MRN, FROM_HS_GOODS_CLASS_ID, FROM_CN_GOODS_CLASS_ID, FROM_SENS_GOODS_CLASS_ID, TO_HS_GOODS_CLASS_ID, TO_CN_GOODS_CLASS_ID, TO_SENS_GOODS_CLASS_ID, CUST_OFF_ADDR_SID, TRAD_SP_AUTH_SID, UNL_VERS_NUMB)
		VALUES (src.SID, src.TRANS_OPER_SID, src.VERS_NUMB, src.SEAL_IDENT, src.SEAL_IDENT_LNG, src.RE_USE, src.TRANS_OPER_UNL_MRN, src.EN_ROUT_EVENT_MRN, src.EN_ROUT_EVENT_SEQ, src.DEP_TRANS_OPER_MRN, src.FROM_HS_GOODS_CLASS_ID, src.FROM_CN_GOODS_CLASS_ID, src.FROM_SENS_GOODS_CLASS_ID, src.TO_HS_GOODS_CLASS_ID, src.TO_CN_GOODS_CLASS_ID, src.TO_SENS_GOODS_CLASS_ID, src.CUST_OFF_ADDR_SID, src.TRAD_SP_AUTH_SID, src.UNL_VERS_NUMB);
		SET @Merged = 1;
	END

	IF @TableName = 'SEAL_DET_VERS' BEGIN
		MERGE INTO ncts.SEAL_DET_VERS AS tgt
		USING [WI_StageODS].ncts.SEAL_DET_VERS AS src
		ON (tgt.TRANS_OPER_SID=src.TRANS_OPER_SID and tgt.TRANS_OPER_VERS_NUMB=src.TRANS_OPER_VERS_NUMB and tgt.SEAL_DET_SID=src.SEAL_DET_SID)
		WHEN NOT MATCHED
		THEN INSERT (TRANS_OPER_SID, TRANS_OPER_VERS_NUMB, SEAL_DET_SID)
		VALUES (src.TRANS_OPER_SID, src.TRANS_OPER_VERS_NUMB, src.SEAL_DET_SID);
		SET @Merged = 1;
	END

	IF @TableName = 'SENS_GOODS_CLASS' BEGIN
		MERGE INTO ncts.SENS_GOODS_CLASS AS tgt
		USING [WI_StageODS].ncts.SENS_GOODS_CLASS AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.HS_GOODS_CLASS_ID=src.HS_GOODS_CLASS_ID, tgt.SGI_COD=src.SGI_COD, tgt.REF_QUANT=src.REF_QUANT, tgt.MEAS_UNIT_ID=src.MEAS_UNIT_ID, tgt.EEC_TERR_LIM=src.EEC_TERR_LIM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (SID, HS_GOODS_CLASS_ID, SGI_COD, REF_QUANT, MEAS_UNIT_ID, EEC_TERR_LIM, DAT_START, DAT_END)
		VALUES (src.SID, src.HS_GOODS_CLASS_ID, src.SGI_COD, src.REF_QUANT, src.MEAS_UNIT_ID, src.EEC_TERR_LIM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'SENS_GOODS_CLASS_DESCR' BEGIN
		DELETE FROM ncts.SENS_GOODS_CLASS_DESCR;
		MERGE INTO ncts.SENS_GOODS_CLASS_DESCR AS tgt
		USING [WI_StageODS].ncts.SENS_GOODS_CLASS_DESCR AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.SENS_GOODS_CLASS_SID=src.SENS_GOODS_CLASS_SID, tgt.LANG_ID=src.LANG_ID, tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START, tgt.NAM=src.NAM
		WHEN NOT MATCHED
		THEN INSERT (SENS_GOODS_CLASS_SID, LANG_ID, DAT_END, DAT_START, NAM)
		VALUES (src.SENS_GOODS_CLASS_SID, src.LANG_ID, src.DAT_END, src.DAT_START, src.NAM);
		SET @Merged = 1;
	END

	IF @TableName = 'SP_AUTH_CONTR_LOC' BEGIN
		MERGE INTO ncts.SP_AUTH_CONTR_LOC AS tgt
		USING [WI_StageODS].ncts.SP_AUTH_CONTR_LOC AS src
		ON (tgt.TRAD_SP_AUTH_ID=src.TRAD_SP_AUTH_ID and tgt.CUST_OFF_ADDR_SID=src.CUST_OFF_ADDR_SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.TIMER=src.TIMER, tgt.STAND_DEL_TIM=src.STAND_DEL_TIM, tgt.SEALS_CHECK=src.SEALS_CHECK, tgt.DESCR=src.DESCR, tgt.COMM=src.COMM, tgt.DESCR_LNG=src.DESCR_LNG, tgt.COMM_LNG=src.COMM_LNG, tgt.AFTER_HOUR=src.AFTER_HOUR
		WHEN NOT MATCHED
		THEN INSERT (TRAD_SP_AUTH_ID, CUST_OFF_ID, CUST_OFF_ADDR_SID, TIMER, STAND_DEL_TIM, SEALS_CHECK, DESCR, COMM, DESCR_LNG, COMM_LNG, AFTER_HOUR)
		VALUES (src.TRAD_SP_AUTH_ID, src.CUST_OFF_ID, src.CUST_OFF_ADDR_SID, src.TIMER, src.STAND_DEL_TIM, src.SEALS_CHECK, src.DESCR, src.COMM, src.DESCR_LNG, src.COMM_LNG, src.AFTER_HOUR);
		SET @Merged = 1;
	END

	IF @TableName = 'SP_AUTH_GOODS_EXCL' BEGIN
		DELETE FROM ncts.SP_AUTH_GOODS_EXCL
		MERGE INTO ncts.SP_AUTH_GOODS_EXCL AS tgt
		USING [WI_StageODS].ncts.SP_AUTH_GOODS_EXCL AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRAD_SP_AUTH_ID=src.TRAD_SP_AUTH_ID, tgt.HS_GOODS_CLASS_ID=src.HS_GOODS_CLASS_ID, tgt.CN_GOODS_CLASS_ID=src.CN_GOODS_CLASS_ID
		WHEN NOT MATCHED
		THEN INSERT (TRAD_SP_AUTH_ID, HS_GOODS_CLASS_ID, CN_GOODS_CLASS_ID)
		VALUES (src.TRAD_SP_AUTH_ID, src.HS_GOODS_CLASS_ID, src.CN_GOODS_CLASS_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'SPEC_CIRC_IND' BEGIN
		MERGE INTO ncts.SPEC_CIRC_IND AS tgt
		USING [WI_StageODS].ncts.SPEC_CIRC_IND AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'SPEC_CIRC_IND_NAM' BEGIN
		DELETE FROM ncts.SPEC_CIRC_IND_NAM
		MERGE INTO ncts.SPEC_CIRC_IND_NAM AS tgt
		USING [WI_StageODS].ncts.SPEC_CIRC_IND_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.SPEC_CIRC_IND_ID=src.SPEC_CIRC_IND_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START
		WHEN NOT MATCHED
		THEN INSERT (SPEC_CIRC_IND_ID, LANG_ID, NAM, DAT_END, DAT_START)
		VALUES (src.SPEC_CIRC_IND_ID, src.LANG_ID, src.NAM, src.DAT_END, src.DAT_START);
		SET @Merged = 1;
	END

	IF @TableName = 'SPEC_MENT_TYP' BEGIN
		MERGE INTO ncts.SPEC_MENT_TYP AS tgt
		USING [WI_StageODS].ncts.SPEC_MENT_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.COMM_DOM=src.COMM_DOM, tgt.DAT_START=src.DAT_START, tgt.DESCR=src.DESCR, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, COMM_DOM, DAT_START, DESCR, DAT_END)
		VALUES (src.ID, src.COMM_DOM, src.DAT_START, src.DESCR, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'SPEC_MENT_TYP_NAM' BEGIN
		DELETE FROM ncts.SPEC_MENT_TYP_NAM
		MERGE INTO ncts.SPEC_MENT_TYP_NAM AS tgt
		USING [WI_StageODS].ncts.SPEC_MENT_TYP_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.SPEC_MENT_TYP_ID=src.SPEC_MENT_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (SPEC_MENT_TYP_ID, LANG_ID, NAM, DAT_START, DAT_END)
		VALUES (src.SPEC_MENT_TYP_ID, src.LANG_ID, src.NAM, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'SPEC_NOT_COD' BEGIN
		MERGE INTO ncts.SPEC_NOT_COD AS tgt
		USING [WI_StageODS].ncts.SPEC_NOT_COD AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START
		WHEN NOT MATCHED
		THEN INSERT (DAT_END, DAT_START, ID)
		VALUES (src.DAT_END, src.DAT_START, src.ID);
		SET @Merged = 1;
	END

	IF @TableName = 'SPEC_NOT_COD_NAM' BEGIN
		MERGE INTO ncts.SPEC_NOT_COD_NAM AS tgt
		USING [WI_StageODS].ncts.SPEC_NOT_COD_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START, tgt.NAM=src.NAM, tgt.LANG_ID=src.LANG_ID, tgt.SPEC_NOT_COD_ID=src.SPEC_NOT_COD_ID
		WHEN NOT MATCHED
		THEN INSERT (DAT_END, DAT_START, NAM, LANG_ID, SPEC_NOT_COD_ID)
		VALUES (src.DAT_END, src.DAT_START, src.NAM, src.LANG_ID, src.SPEC_NOT_COD_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'TRAD' BEGIN
		MERGE INTO ncts.TRAD AS tgt
		USING [WI_StageODS].ncts.TRAD AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.COUNTRY_ID=src.COUNTRY_ID, tgt.CITY=src.CITY, tgt.NAM=src.NAM, tgt.POST_COD=src.POST_COD, tgt.STR_AND_NUMB=src.STR_AND_NUMB, tgt.DAT_START=src.DAT_START, tgt.TIN=src.TIN, tgt.CONT_PERS=src.CONT_PERS, tgt.FAX_NUMB=src.FAX_NUMB, tgt.FIRST_NAM=src.FIRST_NAM, tgt.PHON_NUMB=src.PHON_NUMB, tgt.DAT_END=src.DAT_END, tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.NAD_LNG=src.NAD_LNG, tgt.EDI_TRAD=src.EDI_TRAD, tgt.TIN_OR_HOLDER_ID=src.TIN_OR_HOLDER_ID
		WHEN NOT MATCHED
		THEN INSERT (SID, COUNTRY_ID, CITY, NAM, POST_COD, STR_AND_NUMB, DAT_START, TIN, CONT_PERS, FAX_NUMB, FIRST_NAM, PHON_NUMB, DAT_END, CUST_OFF_ID, NAD_LNG, EDI_TRAD, TIN_OR_HOLDER_ID)
		VALUES (src.SID, src.COUNTRY_ID, src.CITY, src.NAM, src.POST_COD, src.STR_AND_NUMB, src.DAT_START, src.TIN, src.CONT_PERS, src.FAX_NUMB, src.FIRST_NAM, src.PHON_NUMB, src.DAT_END, src.CUST_OFF_ID, src.NAD_LNG, src.EDI_TRAD, src.TIN_OR_HOLDER_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'TRAD_OFF_SP_AUTH' BEGIN
		MERGE INTO ncts.TRAD_OFF_SP_AUTH AS tgt
		USING [WI_StageODS].ncts.TRAD_OFF_SP_AUTH AS src
		ON (tgt.CUST_OFF_ID=src.CUST_OFF_ID and tgt.TRAD_SP_AUTH_ID=src.TRAD_SP_AUTH_ID)
		WHEN NOT MATCHED
		THEN INSERT (CUST_OFF_ID, TRAD_SP_AUTH_ID)
		VALUES (src.CUST_OFF_ID, src.TRAD_SP_AUTH_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'TRAD_OFF_SP_AUTH_LOC' BEGIN
		MERGE INTO ncts.TRAD_OFF_SP_AUTH_LOC AS tgt
		USING [WI_StageODS].ncts.TRAD_OFF_SP_AUTH_LOC AS src
		ON (tgt.CUST_OFF_ID=src.CUST_OFF_ID and tgt.TRAD_SP_AUTH_ID=src.TRAD_SP_AUTH_ID and tgt.LOC=src.LOC)
		WHEN NOT MATCHED
		THEN INSERT (CUST_OFF_ID, TRAD_SP_AUTH_ID, LOC)
		VALUES (src.CUST_OFF_ID, src.TRAD_SP_AUTH_ID, src.LOC);
		SET @Merged = 1;
	END

	IF @TableName = 'TRAD_SP_AUTH' BEGIN
		MERGE INTO ncts.TRAD_SP_AUTH AS tgt
		USING [WI_StageODS].ncts.TRAD_SP_AUTH AS src
		ON (tgt.ID=src.ID and tgt.LOC=src.LOC and tgt.DECL_TYP=src.DECL_TYP)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_REQ=src.DAT_REQ, tgt.DAT_SENT_TO_TRAD=src.DAT_SENT_TO_TRAD, tgt.DAT_EXP=src.DAT_EXP, tgt.MAX_JOURN_TIM=src.MAX_JOURN_TIM, tgt.COMM=src.COMM, tgt.TRAD_SID=src.TRAD_SID, tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.COMM_LNG=src.COMM_LNG, tgt.USER_ID=src.USER_ID
		WHEN NOT MATCHED
		THEN INSERT (ID, LOC, DAT_REQ, DAT_SENT_TO_TRAD, DAT_EXP, MAX_JOURN_TIM, COMM, TRAD_SID, CUST_OFF_ID, COMM_LNG, USER_ID, DECL_TYP)
		VALUES (src.ID, src.LOC, src.DAT_REQ, src.DAT_SENT_TO_TRAD, src.DAT_EXP, src.MAX_JOURN_TIM, src.COMM, src.TRAD_SID, src.CUST_OFF_ID, src.COMM_LNG, src.USER_ID, src.DECL_TYP);
		SET @Merged = 1;
	END

	IF @TableName = 'TRAD_SP_AUTH_ID' BEGIN
		MERGE INTO ncts.TRAD_SP_AUTH_ID AS tgt
		USING [WI_StageODS].ncts.TRAD_SP_AUTH_ID AS src
		ON (tgt.ID=src.ID)
		WHEN NOT MATCHED
		THEN INSERT (ID)
		VALUES (src.ID);
		SET @Merged = 1;
	END

	IF @TableName = 'TRADER_ENQUIRY_REQ' BEGIN
		MERGE INTO ncts.TRADER_ENQUIRY_REQ AS tgt
		USING [WI_StageODS].ncts.TRADER_ENQUIRY_REQ AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.MRN=src.MRN, tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.DATE_LIMIT_FOR_RESPONSE=src.DATE_LIMIT_FOR_RESPONSE, tgt.DATE_OF_REQUEST=src.DATE_OF_REQUEST, tgt.COMP_CUST_OFF_ID=src.COMP_CUST_OFF_ID, tgt.DEP_CUST_OFF_ID=src.DEP_CUST_OFF_ID, tgt.RECEIVED_REPLY=src.RECEIVED_REPLY
		WHEN NOT MATCHED
		THEN INSERT (SID, MRN, TRANS_OPER_SID, DATE_LIMIT_FOR_RESPONSE, DATE_OF_REQUEST, COMP_CUST_OFF_ID, DEP_CUST_OFF_ID, RECEIVED_REPLY)
		VALUES (src.SID, src.MRN, src.TRANS_OPER_SID, src.DATE_LIMIT_FOR_RESPONSE, src.DATE_OF_REQUEST, src.COMP_CUST_OFF_ID, src.DEP_CUST_OFF_ID, src.RECEIVED_REPLY);
		SET @Merged = 1;
	END

	IF @TableName = 'TRADER_ENQUIRY_RESP' BEGIN
		MERGE INTO ncts.TRADER_ENQUIRY_RESP AS tgt
		USING [WI_StageODS].ncts.TRADER_ENQUIRY_RESP AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.MRN=src.MRN, tgt.PRES_CUST_OFF_ID=src.PRES_CUST_OFF_ID, tgt.TCC_DELIVERED=src.TCC_DELIVERED, tgt.DEL_DATE_TC11=src.DEL_DATE_TC11, tgt.INFO_TEXT=src.INFO_TEXT, tgt.INFO_AVAILABLE=src.INFO_AVAILABLE, tgt.ACT_CONS_TRAD_SID=src.ACT_CONS_TRAD_SID, tgt.ACT_CONS_TRADS_SID=src.ACT_CONS_TRADS_SID, tgt.ACT_CONS_TRAD_TIN=src.ACT_CONS_TRAD_TIN
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, MRN, PRES_CUST_OFF_ID, TCC_DELIVERED, DEL_DATE_TC11, INFO_TEXT, INFO_AVAILABLE, ACT_CONS_TRAD_SID, ACT_CONS_TRADS_SID, ACT_CONS_TRAD_TIN)
		VALUES (src.SID, src.TRANS_OPER_SID, src.MRN, src.PRES_CUST_OFF_ID, src.TCC_DELIVERED, src.DEL_DATE_TC11, src.INFO_TEXT, src.INFO_AVAILABLE, src.ACT_CONS_TRAD_SID, src.ACT_CONS_TRADS_SID, src.ACT_CONS_TRAD_TIN);
		SET @Merged = 1;
	END

	IF @TableName = 'TRADS' BEGIN
		MERGE INTO ncts.TRADS AS tgt
		USING [WI_StageODS].ncts.TRADS AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TIN=src.TIN, tgt.CITY=src.CITY, tgt.NAM=src.NAM, tgt.POST_COD=src.POST_COD, tgt.STR_AND_NUMB=src.STR_AND_NUMB, tgt.COUNTRY_ID=src.COUNTRY_ID, tgt.TIN_OR_HOLDER_ID=src.TIN_OR_HOLDER_ID
		WHEN NOT MATCHED
		THEN INSERT (SID, TIN, CITY, NAM, POST_COD, STR_AND_NUMB, COUNTRY_ID, TIN_OR_HOLDER_ID)
		VALUES (src.SID, src.TIN, src.CITY, src.NAM, src.POST_COD, src.STR_AND_NUMB, src.COUNTRY_ID, src.TIN_OR_HOLDER_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'TRAFF_TYP' BEGIN
		MERGE INTO ncts.TRAFF_TYP AS tgt
		USING [WI_StageODS].ncts.TRAFF_TYP AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.NAT_DEF=src.NAT_DEF, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, NAT_DEF, DAT_START, DAT_END)
		VALUES (src.ID, src.NAT_DEF, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'TRAFF_TYP_DESCR' BEGIN
		DELETE FROM ncts.TRAFF_TYP_DESCR
		MERGE INTO ncts.TRAFF_TYP_DESCR AS tgt
		USING [WI_StageODS].ncts.TRAFF_TYP_DESCR AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRAFF_TYP_ID=src.TRAFF_TYP_ID, tgt.LANG_ID=src.LANG_ID, tgt.DESCR=src.DESCR, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (TRAFF_TYP_ID, LANG_ID, DESCR, DAT_START, DAT_END)
		VALUES (src.TRAFF_TYP_ID, src.LANG_ID, src.DESCR, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_CHRG_METH' BEGIN
		MERGE INTO ncts.TRANS_CHRG_METH AS tgt
		USING [WI_StageODS].ncts.TRANS_CHRG_METH AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_CHRG_METH_NAM' BEGIN
		DELETE FROM ncts.TRANS_CHRG_METH_NAM
		MERGE INTO ncts.TRANS_CHRG_METH_NAM AS tgt
		USING [WI_StageODS].ncts.TRANS_CHRG_METH_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_CHRG_METH_ID=src.TRANS_CHRG_METH_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START
		WHEN NOT MATCHED
		THEN INSERT (TRANS_CHRG_METH_ID, LANG_ID, NAM, DAT_END, DAT_START)
		VALUES (src.TRANS_CHRG_METH_ID, src.LANG_ID, src.NAM, src.DAT_END, src.DAT_START);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_OPER' BEGIN
		MERGE INTO ncts.TRANS_OPER AS tgt
		USING [WI_StageODS].ncts.TRANS_OPER AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.AAR_SENT=src.AAR_SENT, tgt.LOCKED_DISP=src.LOCKED_DISP, tgt.BIND_ITIN_FLAG=src.BIND_ITIN_FLAG, tgt.DEP_TRAD_ADDR=src.DEP_TRAD_ADDR, tgt.ARR_TRAD_ADDR=src.ARR_TRAD_ADDR, tgt.DEP_RISK_ANA=src.DEP_RISK_ANA, tgt.ARR_RISK_ANA=src.ARR_RISK_ANA, tgt.DEC_VIA=src.DEC_VIA, tgt.ARR_VIA=src.ARR_VIA, tgt.LOCKED=src.LOCKED, tgt.NOT_COD=src.NOT_COD, tgt.NOT_TXT=src.NOT_TXT, tgt.STAT=src.STAT, tgt.TRAD_SP_AUTH_ID=src.TRAD_SP_AUTH_ID, tgt.TRANS_OPER_STAT_TYP_ID_NA_TRAN=src.TRANS_OPER_STAT_TYP_ID_NA_TRAN, tgt.DAT_TIM_DES_CONTR_REC=src.DAT_TIM_DES_CONTR_REC, tgt.MRN=src.MRN, tgt.LRN=src.LRN, tgt.PRINC_TRAD_SID=src.PRINC_TRAD_SID, tgt.PRINC_TRADS_SID=src.PRINC_TRADS_SID, tgt.PRES_AT_DEST_BY_TRAD_SID=src.PRES_AT_DEST_BY_TRAD_SID, tgt.PRES_AT_DEST_BY_TRADS_SID=src.PRES_AT_DEST_BY_TRADS_SID, tgt.DIV_PROH=src.DIV_PROH, tgt.BIND_ITIN=src.BIND_ITIN, tgt.BIND_ITIN_LNG=src.BIND_ITIN_LNG, tgt.RISK_ANA=src.RISK_ANA, tgt.DAT_DOC_RET=src.DAT_DOC_RET, tgt.DAT_TIM_ALL_TRANS=src.DAT_TIM_ALL_TRANS, tgt.DAT_PRINC_NOT_RESP=src.DAT_PRINC_NOT_RESP, tgt.DAT_TRAD_REQ_REL=src.DAT_TRAD_REQ_REL, tgt.DAT_WRITT_OFF=src.DAT_WRITT_OFF, tgt.ENQ_AT_DEST=src.ENQ_AT_DEST, tgt.ARR_SIMPL_PROC=src.ARR_SIMPL_PROC, tgt.ARR_AGR_GOODS_LOC=src.ARR_AGR_GOODS_LOC, tgt.ARR_AGR_GOODS_LOC_COD=src.ARR_AGR_GOODS_LOC_COD, tgt.ARR_AGR_GOODS_LOC_LNG=src.ARR_AGR_GOODS_LOC_LNG, tgt.DAT_ARR=src.DAT_ARR, tgt.DAT_ARR_NOT=src.DAT_ARR_NOT, tgt.DAT_ACC=src.DAT_ACC, tgt.ARR_NOT_PLAC=src.ARR_NOT_PLAC, tgt.ARR_NOT_PLAC_LNG=src.ARR_NOT_PLAC_LNG, tgt.DAT_DISCR_NOT=src.DAT_DISCR_NOT, tgt.DAT_DISCR_SOLV=src.DAT_DISCR_SOLV, tgt.DAT_GOODS_REL=src.DAT_GOODS_REL, tgt.DAT_OTS_DIV_ARR_ADV=src.DAT_OTS_DIV_ARR_ADV, tgt.DAT_TIM_LIM_FOR_ARR=src.DAT_TIM_LIM_FOR_ARR, tgt.DEP_CUST_OFF_ID=src.DEP_CUST_OFF_ID, tgt.OR_DEST_CUST_OFF_ID=src.OR_DEST_CUST_OFF_ID, tgt.ARR_CUST_OFF_ID=src.ARR_CUST_OFF_ID, tgt.OTS_DIV_REC_BY_CUST_OFF_ID=src.OTS_DIV_REC_BY_CUST_OFF_ID, tgt.TRANS_OPER_STAT_TYP_ID=src.TRANS_OPER_STAT_TYP_ID, tgt.DAT_STAT_UPD=src.DAT_STAT_UPD, tgt.ARR_CUST_OFF_ADDR_SID=src.ARR_CUST_OFF_ADDR_SID, tgt.DEST_DIAL_LANG_ID=src.DEST_DIAL_LANG_ID, tgt.CONTR_NAM=src.CONTR_NAM, tgt.DAT_TIM_ARR_CONTR=src.DAT_TIM_ARR_CONTR, tgt.DAT_TIM_DEP_CONTR=src.DAT_TIM_DEP_CONTR, tgt.OODEP_RES_DISCR=src.OODEP_RES_DISCR, tgt.DEP_CONTR_RES_TYP_ID=src.DEP_CONTR_RES_TYP_ID, tgt.ARR_CONTR_RES_TYP_ID=src.ARR_CONTR_RES_TYP_ID, tgt.CONTR_BY_LNG=src.CONTR_BY_LNG, tgt.SEALS_AFF_BY_USER_ID=src.SEALS_AFF_BY_USER_ID, tgt.INC=src.INC, tgt.SEALS_OK=src.SEALS_OK, tgt.NUMB_OF_SEALS=src.NUMB_OF_SEALS, tgt.WAIT_FOR_INC_DOC=src.WAIT_FOR_INC_DOC, tgt.CONTR_REM=src.CONTR_REM, tgt.CONTR_REM_LNG=src.CONTR_REM_LNG, tgt.CONTR_RES_SEC_COD=src.CONTR_RES_SEC_COD, tgt.WAIT_FOR_RES_FLAG=src.WAIT_FOR_RES_FLAG, tgt.AUD_USER_ID=src.AUD_USER_ID, tgt.AUD_DAT_TIM=src.AUD_DAT_TIM, tgt.DISP_COUNTRY_ID=src.DISP_COUNTRY_ID, tgt.DEST_COUNTRY_ID=src.DEST_COUNTRY_ID, tgt.DECL_TYP_ID=src.DECL_TYP_ID, tgt.NUMB_OF_LOAD_LISTS=src.NUMB_OF_LOAD_LISTS, tgt.SENS=src.SENS, tgt.AUTH_CONSIGNEE_TRAD_TIN=src.AUTH_CONSIGNEE_TRAD_TIN, tgt.DEST_CUST_OFF_ID=src.DEST_CUST_OFF_ID, tgt."PROC"=src."PROC", tgt.PRINC_TRAD_NAM=src.PRINC_TRAD_NAM, tgt.PRINC_TRAD_TIN=src.PRINC_TRAD_TIN, tgt.PRES_AT_DEST_BY_TRAD_NAM=src.PRES_AT_DEST_BY_TRAD_NAM, tgt.PRES_AT_DEST_BY_TRAD_TIN=src.PRES_AT_DEST_BY_TRAD_TIN, tgt.UNL_COMPL=src.UNL_COMPL, tgt.UNL_VERS_NUMB=src.UNL_VERS_NUMB, tgt.GUA_ACCEPTED=src.GUA_ACCEPTED, tgt.RISK_TIMER_STATUS=src.RISK_TIMER_STATUS, tgt.ENQ_EXP_TIMER=src.ENQ_EXP_TIMER, tgt.ENQ_ALLRSP_RCD=src.ENQ_ALLRSP_RCD, tgt.ENQ_RCV=src.ENQ_RCV, tgt.SECURITY_HIGH_RISK=src.SECURITY_HIGH_RISK, tgt.TRA_RISK_ANA=src.TRA_RISK_ANA, tgt.TIR_PAGE=src.TIR_PAGE, tgt.TIR_TYPE=src.TIR_TYPE, tgt.TIR_RESULT=src.TIR_RESULT
		WHEN NOT MATCHED
		THEN INSERT (AAR_SENT, LOCKED_DISP, BIND_ITIN_FLAG, DEP_TRAD_ADDR, ARR_TRAD_ADDR, DEP_RISK_ANA, ARR_RISK_ANA, DEC_VIA, ARR_VIA, LOCKED, NOT_COD, NOT_TXT, STAT, TRAD_SP_AUTH_ID, TRANS_OPER_STAT_TYP_ID_NA_TRAN, DAT_TIM_DES_CONTR_REC, SID, MRN, LRN, PRINC_TRAD_SID, PRINC_TRADS_SID, PRES_AT_DEST_BY_TRAD_SID, PRES_AT_DEST_BY_TRADS_SID, DIV_PROH, BIND_ITIN, BIND_ITIN_LNG, RISK_ANA, DAT_DOC_RET, DAT_TIM_ALL_TRANS, DAT_PRINC_NOT_RESP, DAT_TRAD_REQ_REL, DAT_WRITT_OFF, ENQ_AT_DEST, ARR_SIMPL_PROC, ARR_AGR_GOODS_LOC, ARR_AGR_GOODS_LOC_COD, ARR_AGR_GOODS_LOC_LNG, DAT_ARR, DAT_ARR_NOT, DAT_ACC, ARR_NOT_PLAC, ARR_NOT_PLAC_LNG, DAT_DISCR_NOT, DAT_DISCR_SOLV, DAT_GOODS_REL, DAT_OTS_DIV_ARR_ADV, DAT_TIM_LIM_FOR_ARR, DEP_CUST_OFF_ID, OR_DEST_CUST_OFF_ID, ARR_CUST_OFF_ID, OTS_DIV_REC_BY_CUST_OFF_ID, TRANS_OPER_STAT_TYP_ID, DAT_STAT_UPD, ARR_CUST_OFF_ADDR_SID, DEST_DIAL_LANG_ID, CONTR_NAM, DAT_TIM_ARR_CONTR, DAT_TIM_DEP_CONTR, OODEP_RES_DISCR, DEP_CONTR_RES_TYP_ID, ARR_CONTR_RES_TYP_ID, CONTR_BY_LNG, SEALS_AFF_BY_USER_ID, INC, SEALS_OK, NUMB_OF_SEALS, WAIT_FOR_INC_DOC, CONTR_REM, CONTR_REM_LNG, CONTR_RES_SEC_COD, WAIT_FOR_RES_FLAG, AUD_USER_ID, AUD_DAT_TIM, DISP_COUNTRY_ID, DEST_COUNTRY_ID, DECL_TYP_ID, NUMB_OF_LOAD_LISTS, SENS, AUTH_CONSIGNEE_TRAD_TIN, DEST_CUST_OFF_ID, "PROC", PRINC_TRAD_NAM, PRINC_TRAD_TIN, PRES_AT_DEST_BY_TRAD_NAM, PRES_AT_DEST_BY_TRAD_TIN, UNL_COMPL, UNL_VERS_NUMB, GUA_ACCEPTED, RISK_TIMER_STATUS, ENQ_EXP_TIMER, ENQ_ALLRSP_RCD, ENQ_RCV, SECURITY_HIGH_RISK, TRA_RISK_ANA, TIR_PAGE, TIR_TYPE, TIR_RESULT)
		VALUES (src.AAR_SENT, src.LOCKED_DISP, src.BIND_ITIN_FLAG, src.DEP_TRAD_ADDR, src.ARR_TRAD_ADDR, src.DEP_RISK_ANA, src.ARR_RISK_ANA, src.DEC_VIA, src.ARR_VIA, src.LOCKED, src.NOT_COD, src.NOT_TXT, src.STAT, src.TRAD_SP_AUTH_ID, src.TRANS_OPER_STAT_TYP_ID_NA_TRAN, src.DAT_TIM_DES_CONTR_REC, src.SID, src.MRN, src.LRN, src.PRINC_TRAD_SID, src.PRINC_TRADS_SID, src.PRES_AT_DEST_BY_TRAD_SID, src.PRES_AT_DEST_BY_TRADS_SID, src.DIV_PROH, src.BIND_ITIN, src.BIND_ITIN_LNG, src.RISK_ANA, src.DAT_DOC_RET, src.DAT_TIM_ALL_TRANS, src.DAT_PRINC_NOT_RESP, src.DAT_TRAD_REQ_REL, src.DAT_WRITT_OFF, src.ENQ_AT_DEST, src.ARR_SIMPL_PROC, src.ARR_AGR_GOODS_LOC, src.ARR_AGR_GOODS_LOC_COD, src.ARR_AGR_GOODS_LOC_LNG, src.DAT_ARR, src.DAT_ARR_NOT, src.DAT_ACC, src.ARR_NOT_PLAC, src.ARR_NOT_PLAC_LNG, src.DAT_DISCR_NOT, src.DAT_DISCR_SOLV, src.DAT_GOODS_REL, src.DAT_OTS_DIV_ARR_ADV, src.DAT_TIM_LIM_FOR_ARR, src.DEP_CUST_OFF_ID, src.OR_DEST_CUST_OFF_ID, src.ARR_CUST_OFF_ID, src.OTS_DIV_REC_BY_CUST_OFF_ID, src.TRANS_OPER_STAT_TYP_ID, src.DAT_STAT_UPD, src.ARR_CUST_OFF_ADDR_SID, src.DEST_DIAL_LANG_ID, src.CONTR_NAM, src.DAT_TIM_ARR_CONTR, src.DAT_TIM_DEP_CONTR, src.OODEP_RES_DISCR, src.DEP_CONTR_RES_TYP_ID, src.ARR_CONTR_RES_TYP_ID, src.CONTR_BY_LNG, src.SEALS_AFF_BY_USER_ID, src.INC, src.SEALS_OK, src.NUMB_OF_SEALS, src.WAIT_FOR_INC_DOC, src.CONTR_REM, src.CONTR_REM_LNG, src.CONTR_RES_SEC_COD, src.WAIT_FOR_RES_FLAG, src.AUD_USER_ID, src.AUD_DAT_TIM, src.DISP_COUNTRY_ID, src.DEST_COUNTRY_ID, src.DECL_TYP_ID, src.NUMB_OF_LOAD_LISTS, src.SENS, src.AUTH_CONSIGNEE_TRAD_TIN, src.DEST_CUST_OFF_ID, src."PROC", src.PRINC_TRAD_NAM, src.PRINC_TRAD_TIN, src.PRES_AT_DEST_BY_TRAD_NAM, src.PRES_AT_DEST_BY_TRAD_TIN, src.UNL_COMPL, src.UNL_VERS_NUMB, src.GUA_ACCEPTED, src.RISK_TIMER_STATUS, src.ENQ_EXP_TIMER, src.ENQ_ALLRSP_RCD, src.ENQ_RCV, src.SECURITY_HIGH_RISK, src.TRA_RISK_ANA, src.TIR_PAGE, src.TIR_TYPE, src.TIR_RESULT);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_OPER_MESS' BEGIN
		MERGE INTO ncts.TRANS_OPER_MESS AS tgt
		USING [WI_StageODS].ncts.TRANS_OPER_MESS AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.MESS_IDENT_ID=src.MESS_IDENT_ID, tgt.MESS_ID=src.MESS_ID, tgt.MESS_TYP_ID=src.MESS_TYP_ID, tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.SENT=src.SENT, tgt.MESS_REC=src.MESS_REC, tgt.MESS_SEND=src.MESS_SEND, tgt.UNIQ_REC_ID=src.UNIQ_REC_ID, tgt.UNIQ_SEND_ID=src.UNIQ_SEND_ID, tgt.MRN=src.MRN, tgt.LRN=src.LRN, tgt.DAT_CR=src.DAT_CR, tgt.DAT_REC=src.DAT_REC, tgt.AUD_DAT_TIM=src.AUD_DAT_TIM, tgt.CHECK_SUM=src.CHECK_SUM
		WHEN NOT MATCHED
		THEN INSERT (CUST_OFF_ID, MESS_IDENT_ID, "SID", MESS_ID, MESS_TYP_ID, TRANS_OPER_SID, "SENT", MESS_REC, MESS_SEND, UNIQ_REC_ID, UNIQ_SEND_ID, MRN, LRN, DAT_CR, DAT_REC, AUD_DAT_TIM, CHECK_SUM)
		VALUES (src.CUST_OFF_ID, src.MESS_IDENT_ID, src."SID", src.MESS_ID, src.MESS_TYP_ID, src.TRANS_OPER_SID, src."SENT", src.MESS_REC, src.MESS_SEND, src.UNIQ_REC_ID, src.UNIQ_SEND_ID, src.MRN, src.LRN, src.DAT_CR, src.DAT_REC, src.AUD_DAT_TIM, src.CHECK_SUM);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_OPER_PASS' BEGIN
		MERGE INTO ncts.TRANS_OPER_PASS AS tgt
		USING [WI_StageODS].ncts.TRANS_OPER_PASS AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.ATR_SENT=src.ATR_SENT, tgt.MRN=src.MRN, tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.VERS_NUMB=src.VERS_NUMB, tgt.CUST_OFF_ID=src.CUST_OFF_ID, tgt.DAT_TIM_OFF_ARR=src.DAT_TIM_OFF_ARR, tgt.TRANS_OPER_PASS_STAT_TYP_ID=src.TRANS_OPER_PASS_STAT_TYP_ID, tgt.DAT_STAT_UPD=src.DAT_STAT_UPD, tgt.ARRIVED=src.ARRIVED, tgt.GUARANTEE_INV=src.GUARANTEE_INV
		WHEN NOT MATCHED
		THEN INSERT (ATR_SENT, SID, MRN, TRANS_OPER_SID, VERS_NUMB, CUST_OFF_ID, DAT_TIM_OFF_ARR, TRANS_OPER_PASS_STAT_TYP_ID, DAT_STAT_UPD, ARRIVED, GUARANTEE_INV)
		VALUES (src.ATR_SENT, src.SID, src.MRN, src.TRANS_OPER_SID, src.VERS_NUMB, src.CUST_OFF_ID, src.DAT_TIM_OFF_ARR, src.TRANS_OPER_PASS_STAT_TYP_ID, src.DAT_STAT_UPD, src.ARRIVED, src.GUARANTEE_INV);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_OPER_RISK_PL' BEGIN
		MERGE INTO ncts.TRANS_OPER_RISK_PL AS tgt
		USING [WI_StageODS].ncts.TRANS_OPER_RISK_PL AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.VERS_NUMB=src.VERS_NUMB, tgt.LOC=src.LOC, tgt.ITEM_NUMB_INV=src.ITEM_NUMB_INV, tgt.RISK_ANA_TYP_ID=src.RISK_ANA_TYP_ID, tgt.RISK_ANA_TEXT=src.RISK_ANA_TEXT, tgt.SECMOV=src.SECMOV, tgt.DIRECTIVE_DATE=src.DIRECTIVE_DATE, tgt.DIRECTIVE_TIME=src.DIRECTIVE_TIME, tgt.ERROR_CODE=src.ERROR_CODE, tgt.ERROR_MESSAGE=src.ERROR_MESSAGE, tgt.PROFILE_NO=src.PROFILE_NO, tgt.PROFILE_AUTHOR=src.PROFILE_AUTHOR, tgt.CONTROL_TYPE=src.CONTROL_TYPE, tgt.POINTER=src.POINTER, tgt.TYPE=src.TYPE, tgt.RISK_CRITERIA=src.RISK_CRITERIA, tgt.EMAIL=src.EMAIL, tgt.ACT=src.ACT, tgt.intervention_code=src.intervention_code, tgt.user_id=src.user_id
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, VERS_NUMB, LOC, ITEM_NUMB_INV, RISK_ANA_TYP_ID, RISK_ANA_TEXT, SECMOV, DIRECTIVE_DATE, DIRECTIVE_TIME, ERROR_CODE, ERROR_MESSAGE, PROFILE_NO, PROFILE_AUTHOR, CONTROL_TYPE, POINTER, TYPE, RISK_CRITERIA, EMAIL, ACT, intervention_code, user_id)
		VALUES (src.SID, src.TRANS_OPER_SID, src.VERS_NUMB, src.LOC, src.ITEM_NUMB_INV, src.RISK_ANA_TYP_ID, src.RISK_ANA_TEXT, src.SECMOV, src.DIRECTIVE_DATE, src.DIRECTIVE_TIME, src.ERROR_CODE, src.ERROR_MESSAGE, src.PROFILE_NO, src.PROFILE_AUTHOR, src.CONTROL_TYPE, src.POINTER, src.TYPE, src.RISK_CRITERIA, src.EMAIL, src.ACT, src.intervention_code, src.user_id);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_OPER_STAT_HIST' BEGIN
		MERGE INTO ncts.TRANS_OPER_STAT_HIST AS tgt
		USING [WI_StageODS].ncts.TRANS_OPER_STAT_HIST AS src
		ON (tgt.SID=src.SID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANS_OPER_SID=src.TRANS_OPER_SID, tgt.TRANS_OPER_STAT_TYP_ID=src.TRANS_OPER_STAT_TYP_ID, tgt.TRANS_OPER_PASS_SID=src.TRANS_OPER_PASS_SID, tgt.TRANS_OPER_STAT_TYP_ID_NA_TRAN=src.TRANS_OPER_STAT_TYP_ID_NA_TRAN, tgt.USER_ID=src.USER_ID, tgt.GROUP_ID=src.GROUP_ID, tgt.ACTION=src.ACTION, tgt.REMARKS=src.REMARKS, tgt.DAT_TIM_STAT=src.DAT_TIM_STAT, tgt.TRANS_OPER_PASS_STAT_TYP_ID=src.TRANS_OPER_PASS_STAT_TYP_ID
		WHEN NOT MATCHED
		THEN INSERT (SID, TRANS_OPER_SID, TRANS_OPER_STAT_TYP_ID, TRANS_OPER_PASS_SID, TRANS_OPER_STAT_TYP_ID_NA_TRAN, USER_ID, GROUP_ID, ACTION, REMARKS, DAT_TIM_STAT, TRANS_OPER_PASS_STAT_TYP_ID)
		VALUES (src.SID, src.TRANS_OPER_SID, src.TRANS_OPER_STAT_TYP_ID, src.TRANS_OPER_PASS_SID, src.TRANS_OPER_STAT_TYP_ID_NA_TRAN, src.USER_ID, src.GROUP_ID, src.ACTION, src.REMARKS, src.DAT_TIM_STAT, src.TRANS_OPER_PASS_STAT_TYP_ID);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_OPER_STAT_TYP_NAZWY' BEGIN
		MERGE INTO ncts.TRANS_OPER_STAT_TYP_NAZWY AS tgt
		USING [WI_StageODS].ncts.TRANS_OPER_STAT_TYP_NAZWY AS src
		ON (tgt.TRANS_OPER_STAT_TYP_ID=src.TRANS_OPER_STAT_TYP_ID and tgt.LANG_ID=src.LANG_ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.NAM = src.NAM
		WHEN NOT MATCHED
		THEN INSERT (TRANS_OPER_STAT_TYP_ID, LANG_ID, NAM)
		VALUES (src.TRANS_OPER_STAT_TYP_ID, src.LANG_ID, src.NAM);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_OPER_UNL' BEGIN
		DELETE FROM ncts.TRANS_OPER_UNL
		MERGE INTO ncts.TRANS_OPER_UNL AS tgt
		USING [WI_StageODS].ncts.TRANS_OPER_UNL AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.MRN=src.MRN, tgt.SEALS_OK=src.SEALS_OK, tgt.DAT_UNL=src.DAT_UNL, tgt.CONF=src.CONF, tgt.UNL_COMPL=src.UNL_COMPL, tgt.UNL_REM=src.UNL_REM, tgt.NUMB_OF_SEALS=src.NUMB_OF_SEALS, tgt.UNL_REM_LNG=src.UNL_REM_LNG, tgt.UNL_VERS_NUMB=src.UNL_VERS_NUMB
		WHEN NOT MATCHED
		THEN INSERT (MRN, SEALS_OK, DAT_UNL, CONF, UNL_COMPL, UNL_REM, NUMB_OF_SEALS, UNL_REM_LNG, UNL_VERS_NUMB)
		VALUES (src.MRN, src.SEALS_OK, src.DAT_UNL, src.CONF, src.UNL_COMPL, src.UNL_REM, src.NUMB_OF_SEALS, src.UNL_REM_LNG, src.UNL_VERS_NUMB);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANS_OPER_VERS' BEGIN
		MERGE INTO ncts.TRANS_OPER_VERS AS tgt
		USING [WI_StageODS].ncts.TRANS_OPER_VERS AS src
		ON (tgt.TRANS_OPER_SID=src.TRANS_OPER_SID and tgt.VERS_NUMB=src.VERS_NUMB)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TYP=src.TYP, tgt.STAT=src.STAT, tgt.DAT_SENT_BY_FIRST_PARTY=src.DAT_SENT_BY_FIRST_PARTY, tgt.DAT_TIM_FORM_DEC=src.DAT_TIM_FORM_DEC, tgt.DAT_REC_BY_SEC_PARTY=src.DAT_REC_BY_SEC_PARTY, tgt.PLAC=src.PLAC, tgt.PLAC_LNG=src.PLAC_LNG, tgt.INIT_BY_CUST=src.INIT_BY_CUST, tgt.REASON=src.REASON, tgt.REASON_LNG=src.REASON_LNG
		WHEN NOT MATCHED
		THEN INSERT (TRANS_OPER_SID, VERS_NUMB, TYP, STAT, DAT_SENT_BY_FIRST_PARTY, DAT_TIM_FORM_DEC, DAT_REC_BY_SEC_PARTY, PLAC, PLAC_LNG, INIT_BY_CUST, REASON, REASON_LNG)
		VALUES (src.TRANS_OPER_SID, src.VERS_NUMB, src.TYP, src.STAT, src.DAT_SENT_BY_FIRST_PARTY, src.DAT_TIM_FORM_DEC, src.DAT_REC_BY_SEC_PARTY, src.PLAC, src.PLAC_LNG, src.INIT_BY_CUST, src.REASON, src.REASON_LNG);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANSH_CONT' BEGIN
		DELETE FROM ncts.TRANSH_CONT
		MERGE INTO ncts.TRANSH_CONT AS tgt
		USING [WI_StageODS].ncts.TRANSH_CONT AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.MRN=src.MRN, tgt.EN_ROUT_EVENT_SEQ=src.EN_ROUT_EVENT_SEQ, tgt.INC_IND=src.INC_IND, tgt.INC_FLAG=src.INC_FLAG, tgt.NEW_CONT_NUMB=src.NEW_CONT_NUMB
		WHEN NOT MATCHED
		THEN INSERT (MRN, EN_ROUT_EVENT_SEQ, INC_IND, INC_FLAG, NEW_CONT_NUMB)
		VALUES (src.MRN, src.EN_ROUT_EVENT_SEQ, src.INC_IND, src.INC_FLAG, src.NEW_CONT_NUMB);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANSP_MOD' BEGIN
		MERGE INTO ncts.TRANSP_MOD AS tgt
		USING [WI_StageODS].ncts.TRANSP_MOD AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'TRANSP_MOD_DESCR' BEGIN
		MERGE INTO ncts.TRANSP_MOD_DESCR AS tgt
		USING [WI_StageODS].ncts.TRANSP_MOD_DESCR AS src
		ON(SRC.TRANSP_MOD_ID = TGT.TRANSP_MOD_ID AND SRC.LANG_ID = TGT.LANG_ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.TRANSP_MOD_ID=src.TRANSP_MOD_ID, tgt.LANG_ID=src.LANG_ID, tgt.DESCR=src.DESCR, tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (TRANSP_MOD_ID, LANG_ID, DESCR, DAT_START, DAT_END)
		VALUES (src.TRANSP_MOD_ID, src.LANG_ID, src.DESCR, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'UN_DANGER_GOODS' BEGIN
		MERGE INTO ncts.UN_DANGER_GOODS AS tgt
		USING [WI_StageODS].ncts.UN_DANGER_GOODS AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DAT_START=src.DAT_START, tgt.DAT_END=src.DAT_END
		WHEN NOT MATCHED
		THEN INSERT (ID, DAT_START, DAT_END)
		VALUES (src.ID, src.DAT_START, src.DAT_END);
		SET @Merged = 1;
	END

	IF @TableName = 'UN_DANGER_GOODS_NAM' BEGIN
		DELETE FROM ncts.UN_DANGER_GOODS_NAM
		MERGE INTO ncts.UN_DANGER_GOODS_NAM AS tgt
		USING [WI_StageODS].ncts.UN_DANGER_GOODS_NAM AS src
		ON (1=2)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.UN_DANGER_GOODS_ID=src.UN_DANGER_GOODS_ID, tgt.LANG_ID=src.LANG_ID, tgt.NAM=src.NAM, tgt.DAT_END=src.DAT_END, tgt.DAT_START=src.DAT_START
		WHEN NOT MATCHED
		THEN INSERT (UN_DANGER_GOODS_ID, LANG_ID, NAM, DAT_END, DAT_START)
		VALUES (src.UN_DANGER_GOODS_ID, src.LANG_ID, src.NAM, src.DAT_END, src.DAT_START);
		SET @Merged = 1;
	END

		IF (@Merged = 0)
		BEGIN
				DECLARE @Info VARCHAR(500) = 'W procedurze nie znaleziono bloku odpowiadającego tabeli [' + @TableName + '] z parametru @TableName.';
				THROW 51002, @Info, 0;
					END
				END
			;







-- ==============================================
-- Author:		Michał Błędowski
-- Create date: 2015-12-09
-- Description:	Procedura Merge'ująca w schemacie AIS2.
-- ===============================================

CREATE PROCEDURE [ais2].[MergeTableFromStageODS] (@TableName VARCHAR(50) = NULL)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @Merged BIT = 0;

	IF (@TableName IS NULL) BEGIN
		;THROW 51001, 'Nie wskazano nazwy tabeli w parametrze @TableName procedury.', 0;
		END

	IF @TableName = 'ICS_BALANCE_REQ' BEGIN
	MERGE INTO ais2.ICS_BALANCE_REQ AS tgt
USING WI_StageODS.ais2.ICS_BALANCE_REQ AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.CREATOR=src.CREATOR, tgt.MRN=src.MRN, tgt.STATUS=src.STATUS
WHEN NOT MATCHED
THEN INSERT (ID, CREATOR, MRN, STATUS)
VALUES (src.ID, src.CREATOR, src.MRN, src.STATUS);
	SET @Merged = 1;
	END
		

	IF @TableName = 'ICS_CONTROL_NOTIFICATION' BEGIN
	MERGE INTO ais2.ICS_CONTROL_NOTIFICATION AS tgt
USING WI_StageODS.ais2.ICS_CONTROL_NOTIFICATION AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.DECL_ID=src.DECL_ID, tgt.CONTROL_DATE=src.CONTROL_DATE, tgt.COMMENTS=src.COMMENTS, tgt.DTYPE=src.DTYPE
WHEN NOT MATCHED
THEN INSERT (ID, DECL_ID, CONTROL_DATE, COMMENTS, DTYPE)
VALUES (src.ID, src.DECL_ID, src.CONTROL_DATE, src.COMMENTS, src.DTYPE);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_DECL' BEGIN
	MERGE INTO ais2.ICS_DECL AS tgt
USING WI_StageODS.ais2.ICS_DECL AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.TYPE=src.TYPE, tgt.FLAG=src.FLAG, tgt.MANUAL=src.MANUAL, tgt.REF_NO=src.REF_NO, tgt.RETR_EMAIL=src.RETR_EMAIL, tgt.RETR_POST=src.RETR_POST, tgt.SELF_REF=src.SELF_REF, tgt.SIGN=src.SIGN, tgt.VERSION=src.VERSION, tgt.dts=src.dts, tgt.aeo=src.aeo, tgt.segmentation=src.segmentation, tgt.EMERGENCY=src.EMERGENCY, tgt.REF_NO_PAPER=src.REF_NO_PAPER
WHEN NOT MATCHED
THEN INSERT (ID, TYPE, FLAG, MANUAL, REF_NO, RETR_EMAIL, RETR_POST, SELF_REF, SIGN, VERSION, dts, aeo, segmentation, EMERGENCY, REF_NO_PAPER)
VALUES (src.ID, src.TYPE, src.FLAG, src.MANUAL, src.REF_NO, src.RETR_EMAIL, src.RETR_POST, src.SELF_REF, src.SIGN, src.VERSION, src.dts, src.aeo, src.segmentation, src.EMERGENCY, src.REF_NO_PAPER);
	SET @Merged = 1;
	END

	
	IF @TableName = 'ICS_DECL_PARAM' BEGIN
MERGE INTO ais2.ICS_DECL_PARAM AS tgt
USING WI_StageODS.ais2.ICS_DECL_PARAM AS src
ON (tgt.id=src.id)
WHEN MATCHED
THEN UPDATE SET
tgt.decl_id=src.decl_id, tgt.key_name=src.key_name, tgt.value=src.value
WHEN NOT MATCHED
THEN INSERT (id, decl_id, key_name, value)
VALUES (src.id, src.decl_id, src.key_name, src.value);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_DISREPANCY' BEGIN
	MERGE INTO ais2.ICS_DISREPANCY AS tgt
USING WI_StageODS.ais2.ICS_DISREPANCY AS src
ON (tgt.id=src.id)
WHEN MATCHED
THEN UPDATE SET
tgt.dirt_id=src.dirt_id, tgt.pointer=src.pointer, tgt.was_value=src.was_value, tgt.is_value=src.is_value
WHEN NOT MATCHED
THEN INSERT (id, dirt_id, pointer, was_value, is_value)
VALUES (src.id, src.dirt_id, src.pointer, src.was_value, src.is_value);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_CANCEL_BALANCE_REQ' BEGIN
	MERGE INTO ais2.ICS_CANCEL_BALANCE_REQ AS tgt
USING WI_StageODS.ais2.ICS_CANCEL_BALANCE_REQ AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.REQUEST_ID=src.REQUEST_ID, tgt.STATUS=src.STATUS, tgt.BALANCE_REQUEST_ID=src.BALANCE_REQUEST_ID
WHEN NOT MATCHED
THEN INSERT (ID, REQUEST_ID, STATUS, BALANCE_REQUEST_ID)
VALUES (src.ID, src.REQUEST_ID, src.STATUS, src.BALANCE_REQUEST_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_CONTROL_NOTIFICATION_REQ_DOC' BEGIN
	MERGE INTO ais2.ICS_CONTROL_NOTIFICATION_REQ_DOC AS tgt
USING WI_StageODS.ais2.ICS_CONTROL_NOTIFICATION_REQ_DOC AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.NOTIFICATION_ID=src.NOTIFICATION_ID, tgt.DOC_CODE=src.DOC_CODE, tgt.DOC_NUMBER=src.DOC_NUMBER, tgt.DOC_NOTES=src.DOC_NOTES
WHEN NOT MATCHED
THEN INSERT (ID, NOTIFICATION_ID, DOC_CODE, DOC_NUMBER, DOC_NOTES)
VALUES (src.ID, src.NOTIFICATION_ID, src.DOC_CODE, src.DOC_NUMBER, src.DOC_NOTES);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_DIRT' BEGIN
	MERGE INTO ais2.ICS_DIRT AS tgt
USING WI_StageODS.ais2.ICS_DIRT AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.ADDRESSEE=src.ADDRESSEE, tgt.AUTHOR=src.AUTHOR, tgt.DIR_FOR_NEXT_CO=src.DIR_FOR_NEXT_CO, tgt.DIR_DISPATCHER=src.DIR_DISPATCHER, tgt.INFORMATION=src.INFORMATION, tgt.WARUE=src.WARUE, tgt.WAR1=src.WAR1, tgt.WAR234=src.WAR234, tgt.WAR5=src.WAR5, tgt.COMMENT=src.COMMENT, tgt.MRN=src.MRN, tgt.ALGORITHM_NUMBER=src.ALGORITHM_NUMBER, tgt.OBJECTION_NUMBER=src.OBJECTION_NUMBER, tgt.RISK_AREA=src.RISK_AREA, tgt.samples=src.samples, tgt.PROFILE=src.PROFILE, tgt.STATUS=src.STATUS, tgt.TEXT=src.TEXT, tgt.CONTROL_TYPE=src.CONTROL_TYPE, tgt.POINTER=src.POINTER, tgt.RESULT=src.RESULT, tgt.SOURCE=src.SOURCE, tgt.DECL_ID=src.DECL_ID, tgt.ITEM_TYPE=src.ITEM_TYPE, tgt.REALISATION_DATE=src.REALISATION_DATE, tgt.ID_VERIFICATION_ITEM=src.ID_VERIFICATION_ITEM, tgt.DIRTYPE=src.DIRTYPE, tgt.INTRO=src.INTRO, tgt.ORIGIN=src.ORIGIN, tgt.VERIFICATION_REQUIRED=src.VERIFICATION_REQUIRED, tgt.MODIFIED_BY=src.MODIFIED_BY, tgt.RISK_ANALYSIS_RESULT=src.RISK_ANALYSIS_RESULT, tgt.RESERVATION_NUMBER=src.RESERVATION_NUMBER, tgt.INFORMATION_FOR_DISPATCHER=src.INFORMATION_FOR_DISPATCHER, tgt.AGRIM_DISCREPANCY=src.AGRIM_DISCREPANCY, tgt.OFFICIAL_ANNOTATION=src.OFFICIAL_ANNOTATION, tgt.ADD_TEXT=src.ADD_TEXT, tgt.forced_veri=src.forced_veri, tgt.correct_calc_tsk=src.correct_calc_tsk, tgt.zisar_source=src.zisar_source, tgt.zisar_id=src.zisar_id, tgt.ENTITY_ROLE=src.ENTITY_ROLE, tgt.ADDRESSED_TO_CUSTOMS_OFFICE=src.ADDRESSED_TO_CUSTOMS_OFFICE
WHEN NOT MATCHED
THEN INSERT (ID, ADDRESSEE, AUTHOR, DIR_FOR_NEXT_CO, DIR_DISPATCHER, INFORMATION, WARUE, WAR1, WAR234, WAR5, COMMENT, MRN, ALGORITHM_NUMBER, OBJECTION_NUMBER, RISK_AREA, samples, PROFILE, STATUS, TEXT, CONTROL_TYPE, POINTER, RESULT, SOURCE, DECL_ID, ITEM_TYPE, REALISATION_DATE, ID_VERIFICATION_ITEM, DIRTYPE, INTRO, ORIGIN, VERIFICATION_REQUIRED, MODIFIED_BY, RISK_ANALYSIS_RESULT, RESERVATION_NUMBER, INFORMATION_FOR_DISPATCHER, AGRIM_DISCREPANCY, OFFICIAL_ANNOTATION, ADD_TEXT, forced_veri, correct_calc_tsk, zisar_source, zisar_id, ENTITY_ROLE, ADDRESSED_TO_CUSTOMS_OFFICE)
VALUES (src.ID, src.ADDRESSEE, src.AUTHOR, src.DIR_FOR_NEXT_CO, src.DIR_DISPATCHER, src.INFORMATION, src.WARUE, src.WAR1, src.WAR234, src.WAR5, src.COMMENT, src.MRN, src.ALGORITHM_NUMBER, src.OBJECTION_NUMBER, src.RISK_AREA, src.samples, src.PROFILE, src.STATUS, src.TEXT, src.CONTROL_TYPE, src.POINTER, src.RESULT, src.SOURCE, src.DECL_ID, src.ITEM_TYPE, src.REALISATION_DATE, src.ID_VERIFICATION_ITEM, src.DIRTYPE, src.INTRO, src.ORIGIN, src.VERIFICATION_REQUIRED, src.MODIFIED_BY, src.RISK_ANALYSIS_RESULT, src.RESERVATION_NUMBER, src.INFORMATION_FOR_DISPATCHER, src.AGRIM_DISCREPANCY, src.OFFICIAL_ANNOTATION, src.ADD_TEXT, src.forced_veri, src.correct_calc_tsk, src.zisar_source, src.zisar_id, src.ENTITY_ROLE, src.ADDRESSED_TO_CUSTOMS_OFFICE);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS' BEGIN
	MERGE INTO ais2.ICS_ENS AS tgt
USING WI_StageODS.ais2.ICS_ENS AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.ACCP_DATE=src.ACCP_DATE, tgt.CHANG_FIRS_ENTR=src.CHANG_FIRS_ENTR, tgt.COMM_REFE_NUMB=src.COMM_REFE_NUMB, tgt.CONTAINERS=src.CONTAINERS, tgt.CONV_REFE_NUMB=src.CONV_REFE_NUMB, tgt.CUST_OFFI=src.CUST_OFFI, tgt.DATE_OF_ARRIVING=src.DATE_OF_ARRIVING, tgt.FIRS_ENTR=src.FIRS_ENTR, tgt.FIRS_ENTR_BR=src.FIRS_ENTR_BR, tgt.GOODS_PRES=src.GOODS_PRES, tgt.ICS_DECL=src.ICS_DECL, tgt.LODGMENT=src.LODGMENT, tgt.MRN=src.MRN, tgt.NUMB_ITEMS=src.NUMB_ITEMS, tgt.NUMB_PACK=src.NUMB_PACK, tgt.PLDT_DATE=src.PLDT_DATE, tgt.PLDT_PLACE=src.PLDT_PLACE, tgt.PLACE_OF_LOAD=src.PLACE_OF_LOAD, tgt.PLACE_OF_UNLOAD=src.PLACE_OF_UNLOAD, tgt.REGI_CUST_EMAIL=src.REGI_CUST_EMAIL, tgt.REGI_DATE=src.REGI_DATE, tgt.REPR_CUST_EMAIL=src.REPR_CUST_EMAIL, tgt.SPEC_CIRC_INDI=src.SPEC_CIRC_INDI, tgt.STATUS=src.STATUS, tgt.TIME_TO_RESULT=src.TIME_TO_RESULT, tgt.TOTAL_GROSS_MASS=src.TOTAL_GROSS_MASS, tgt.TRAN_METH_PAYM=src.TRAN_METH_PAYM, tgt.TAB_NATION=src.TAB_NATION, tgt.TAB_SINGS=src.TAB_SINGS, tgt.TAB_TYPE=src.TAB_TYPE, tgt.WAR_DATE=src.WAR_DATE, tgt.AEO_CTRL_BTN=src.AEO_CTRL_BTN, tgt.SEND_319_FLAG=src.SEND_319_FLAG, tgt.SEND_351_FLAG=src.SEND_351_FLAG, tgt.INTRO=src.INTRO
WHEN NOT MATCHED
THEN INSERT (ACCP_DATE, CHANG_FIRS_ENTR, COMM_REFE_NUMB, CONTAINERS, CONV_REFE_NUMB, CUST_OFFI, DATE_OF_ARRIVING, FIRS_ENTR, FIRS_ENTR_BR, GOODS_PRES, ICS_DECL, LODGMENT, MRN, NUMB_ITEMS, NUMB_PACK, PLDT_DATE, PLDT_PLACE, PLACE_OF_LOAD, PLACE_OF_UNLOAD, REGI_CUST_EMAIL, REGI_DATE, REPR_CUST_EMAIL, SPEC_CIRC_INDI, STATUS, TIME_TO_RESULT, TOTAL_GROSS_MASS, TRAN_METH_PAYM, TAB_NATION, TAB_SINGS, TAB_TYPE, WAR_DATE, ID, AEO_CTRL_BTN, SEND_319_FLAG, SEND_351_FLAG, INTRO)
VALUES (src.ACCP_DATE, src.CHANG_FIRS_ENTR, src.COMM_REFE_NUMB, src.CONTAINERS, src.CONV_REFE_NUMB, src.CUST_OFFI, src.DATE_OF_ARRIVING, src.FIRS_ENTR, src.FIRS_ENTR_BR, src.GOODS_PRES, src.ICS_DECL, src.LODGMENT, src.MRN, src.NUMB_ITEMS, src.NUMB_PACK, src.PLDT_DATE, src.PLDT_PLACE, src.PLACE_OF_LOAD, src.PLACE_OF_UNLOAD, src.REGI_CUST_EMAIL, src.REGI_DATE, src.REPR_CUST_EMAIL, src.SPEC_CIRC_INDI, src.STATUS, src.TIME_TO_RESULT, src.TOTAL_GROSS_MASS, src.TRAN_METH_PAYM, src.TAB_NATION, src.TAB_SINGS, src.TAB_TYPE, src.WAR_DATE, src.ID, src.AEO_CTRL_BTN, src.SEND_319_FLAG, src.SEND_351_FLAG, src.INTRO);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_GAN' BEGIN
	MERGE INTO ais2.ICS_GAN AS tgt
USING WI_StageODS.ais2.ICS_GAN AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.ACCP_DATE=src.ACCP_DATE, tgt.CONT=src.CONT, tgt.ARRV_DATE=src.ARRV_DATE, tgt.DECL_COUT=src.DECL_COUT, tgt.FACT_ENTRY=src.FACT_ENTRY, tgt.GROSS_MASS=src.GROSS_MASS, tgt.GROSS_MASS_BR=src.GROSS_MASS_BR, tgt.GROSS_MASS_BRC=src.GROSS_MASS_BRC, tgt.INTRO_DATE=src.INTRO_DATE, tgt.ITEM_NUMB=src.ITEM_NUMB, tgt.ITEM_NUMB_BR=src.ITEM_NUMB_BR, tgt.ITEM_NUMB_BRC=src.ITEM_NUMB_BRC, tgt.PACK_NUMB=src.PACK_NUMB, tgt.PACK_NUMB_BR=src.PACK_NUMB_BR, tgt.PACK_NUMB_BRC=src.PACK_NUMB_BRC, tgt.PRES_DATE=src.PRES_DATE, tgt.REGI_CUST_EMAIL=src.REGI_CUST_EMAIL, tgt.REGI_DATE=src.REGI_DATE, tgt.STATUS=src.STATUS, tgt.TAB_SINGS=src.TAB_SINGS, tgt.TAB_TYPE=src.TAB_TYPE, tgt.TRANS_DOC_CODE=src.TRANS_DOC_CODE, tgt.TRANS_DOC_NUMB=src.TRANS_DOC_NUMB, tgt.PLDT_DATE=src.PLDT_DATE, tgt.PLDT_PLACE=src.PLDT_PLACE, tgt.TAB_COUN=src.TAB_COUN, tgt.SEND_302_TIME=src.SEND_302_TIME, tgt.FIRST_FACT_ENTRY=src.FIRST_FACT_ENTRY, tgt.SUBTYPE=src.SUBTYPE, tgt.DSK_ID=src.DSK_ID
WHEN NOT MATCHED
THEN INSERT (ACCP_DATE, CONT, ARRV_DATE, DECL_COUT, FACT_ENTRY, GROSS_MASS, GROSS_MASS_BR, GROSS_MASS_BRC, INTRO_DATE, ITEM_NUMB, ITEM_NUMB_BR, ITEM_NUMB_BRC, PACK_NUMB, PACK_NUMB_BR, PACK_NUMB_BRC, PRES_DATE, REGI_CUST_EMAIL, REGI_DATE, STATUS, TAB_SINGS, TAB_TYPE, TRANS_DOC_CODE, TRANS_DOC_NUMB, ID, PLDT_DATE, PLDT_PLACE, TAB_COUN, SEND_302_TIME, FIRST_FACT_ENTRY, SUBTYPE, DSK_ID)
VALUES (src.ACCP_DATE, src.CONT, src.ARRV_DATE, src.DECL_COUT, src.FACT_ENTRY, src.GROSS_MASS, src.GROSS_MASS_BR, src.GROSS_MASS_BRC, src.INTRO_DATE, src.ITEM_NUMB, src.ITEM_NUMB_BR, src.ITEM_NUMB_BRC, src.PACK_NUMB, src.PACK_NUMB_BR, src.PACK_NUMB_BRC, src.PRES_DATE, src.REGI_CUST_EMAIL, src.REGI_DATE, src.STATUS, src.TAB_SINGS, src.TAB_TYPE, src.TRANS_DOC_CODE, src.TRANS_DOC_NUMB, src.ID, src.PLDT_DATE, src.PLDT_PLACE, src.TAB_COUN, src.SEND_302_TIME, src.FIRST_FACT_ENTRY, src.SUBTYPE, src.DSK_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_MESS' BEGIN
	ALTER TABLE [aimp2].[ICS_MESS] NOCHECK CONSTRAINT [ICS_MESS$FKA784FFEC40C6EB1];
	MERGE INTO ais2.ICS_MESS AS tgt
		USING WI_StageODS.ais2.ICS_MESS AS src
		ON (tgt.ID=src.ID)
		WHEN MATCHED
		THEN UPDATE SET
		tgt.DESCRIPTION=src.DESCRIPTION, tgt.DIRECTION=src.DIRECTION, tgt.DOC_ID=src.DOC_ID, tgt.DOC_TIME=src.DOC_TIME, tgt.MIME_TYPE=src.MIME_TYPE, tgt.NAMESPACE=src.NAMESPACE, tgt.RECIPIENT=src.RECIPIENT, tgt.REF_NO=src.REF_NO, tgt.SELF_REF=src.SELF_REF, tgt.SENDER=src.SENDER, tgt.VERSION=src.VERSION, tgt.XML_NAME=src.XML_NAME, tgt.ATTACH_ID=src.ATTACH_ID, tgt.DECL_ID=src.DECL_ID, tgt.RESP_TO=src.RESP_TO, tgt.APP_TRANS_ID=src.APP_TRANS_ID, tgt.ARRIVE_ID=src.ARRIVE_ID, tgt.ARRIVE_DATE=src.ARRIVE_DATE, tgt.MANUAL=src.MANUAL, tgt.UNHANDLED=src.UNHANDLED, tgt.entity_id=src.entity_id, tgt.entity_id_agent=src.entity_id_agent, tgt.person_id_seap=src.person_id_seap, tgt.person_id_sisc=src.person_id_sisc, tgt.case_id=src.case_id, tgt.nadawca_email=src.nadawca_email, tgt.REJECTED=src.REJECTED
		WHEN NOT MATCHED
		THEN INSERT (ID, DESCRIPTION, DIRECTION, DOC_ID, DOC_TIME, MIME_TYPE, NAMESPACE, RECIPIENT, REF_NO, SELF_REF, SENDER, VERSION, XML_NAME, ATTACH_ID, DECL_ID, RESP_TO, APP_TRANS_ID, ARRIVE_ID, ARRIVE_DATE, MANUAL, UNHANDLED, entity_id, entity_id_agent, person_id_seap, person_id_sisc, case_id, nadawca_email, REJECTED)
		VALUES (src.ID, src.DESCRIPTION, src.DIRECTION, src.DOC_ID, src.DOC_TIME, src.MIME_TYPE, src.NAMESPACE, src.RECIPIENT, src.REF_NO, src.SELF_REF, src.SENDER, src.VERSION, src.XML_NAME, src.ATTACH_ID, src.DECL_ID, src.RESP_TO, src.APP_TRANS_ID, src.ARRIVE_ID, src.ARRIVE_DATE, src.MANUAL, src.UNHANDLED, src.entity_id, src.entity_id_agent, src.person_id_seap, src.person_id_sisc, src.case_id, src.nadawca_email, src.REJECTED);
	SET @Merged = 1;
	END

	
	IF @TableName = 'ICS_MESS_KANAL' BEGIN
MERGE INTO ais2.ICS_MESS_KANAL AS tgt
USING WI_StageODS.ais2.ICS_MESS_KANAL AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.MESS_ID=src.MESS_ID, tgt.KTYP=src.KTYP, tgt.KCHOICE=src.KCHOICE, tgt.VAL=src.VAL, tgt.VAL_ADD=src.VAL_ADD
WHEN NOT MATCHED
THEN INSERT (ID, MESS_ID, KTYP, KCHOICE, VAL, VAL_ADD)
VALUES (src.ID, src.MESS_ID, src.KTYP, src.KCHOICE, src.VAL, src.VAL_ADD);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_OPER' BEGIN
	MERGE INTO ais2.ICS_OPER AS tgt
USING WI_StageODS.ais2.ICS_OPER AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.ANNO=src.ANNO, tgt.CODE=src.CODE, tgt.OPER=src.OPER, tgt.TIME=src.TIME, tgt.DECL_ID=src.DECL_ID, tgt.ANNO_KIND=src.ANNO_KIND
WHEN NOT MATCHED
THEN INSERT (ID, ANNO, CODE, OPER, TIME, DECL_ID, ANNO_KIND)
VALUES (src.ID, src.ANNO, src.CODE, src.OPER, src.TIME, src.DECL_ID, src.ANNO_KIND);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_CHANG' BEGIN
	MERGE INTO ais2.ICS_CHANG AS tgt
USING WI_StageODS.ais2.ICS_CHANG AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.AFTER=src.AFTER, tgt.BEFORE=src.BEFORE, tgt.ITEM=src.ITEM, tgt.OPER_ID=src.OPER_ID
WHEN NOT MATCHED
THEN INSERT (ID, AFTER, BEFORE, ITEM, OPER_ID)
VALUES (src.ID, src.AFTER, src.BEFORE, src.ITEM, src.OPER_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_DIRT_CHANGE' BEGIN
	MERGE INTO ais2.ICS_DIRT_CHANGE AS tgt
USING WI_StageODS.ais2.ICS_DIRT_CHANGE AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.DIRT_ID=src.DIRT_ID, tgt.AFFECTS=src.AFFECTS, tgt.AFTER=src.AFTER, tgt.JUSTIFICATION=src.JUSTIFICATION, tgt.INITIAL_VALUE=src.INITIAL_VALUE
WHEN NOT MATCHED
THEN INSERT (ID, DIRT_ID, AFFECTS, AFTER, JUSTIFICATION, INITIAL_VALUE)
VALUES (src.ID, src.DIRT_ID, src.AFFECTS, src.AFTER, src.JUSTIFICATION, src.INITIAL_VALUE);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_DIRT_CONTROL_METHOD' BEGIN
	MERGE INTO ais2.ICS_DIRT_CONTROL_METHOD AS tgt
USING WI_StageODS.ais2.ICS_DIRT_CONTROL_METHOD AS src
ON (tgt.directive_id=src.directive_id AND tgt.code=src.code)
--WHEN MATCHED
--THEN UPDATE SET
--==
WHEN NOT MATCHED
THEN INSERT (directive_id, code)
VALUES (src.directive_id, src.code);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_DIRT_IND' BEGIN
	MERGE INTO ais2.ICS_DIRT_IND AS tgt
USING WI_StageODS.ais2.ICS_DIRT_IND AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.DIRECTIVE_ID=src.DIRECTIVE_ID, tgt.NAME=src.NAME, tgt.VALUE=src.VALUE, tgt.show=src.show
WHEN NOT MATCHED
THEN INSERT (ID, DIRECTIVE_ID, NAME, VALUE, show)
VALUES (src.ID, src.DIRECTIVE_ID, src.NAME, src.VALUE, src.show);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_DIRT_INTR' BEGIN
	MERGE INTO ais2.ICS_DIRT_INTR AS tgt
USING WI_StageODS.ais2.ICS_DIRT_INTR AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.CODE=src.CODE, tgt.DIRT_ID=src.DIRT_ID
WHEN NOT MATCHED
THEN INSERT (ID, CODE, DIRT_ID)
VALUES (src.ID, src.CODE, src.DIRT_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_DIRT_POINTER' BEGIN
	MERGE INTO ais2.ICS_DIRT_POINTER AS tgt
USING WI_StageODS.ais2.ICS_DIRT_POINTER AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.DIRT_ID=src.DIRT_ID, tgt.NAME=src.NAME, tgt.TYPE=src.TYPE, tgt.VALUE=src.VALUE
WHEN NOT MATCHED
THEN INSERT (ID, DIRT_ID, NAME, TYPE, VALUE)
VALUES (src.ID, src.DIRT_ID, src.NAME, src.TYPE, src.VALUE);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_DIRT_POSITION' BEGIN
	MERGE INTO ais2.ICS_DIRT_POSITION AS tgt
USING WI_StageODS.ais2.ICS_DIRT_POSITION AS src
ON (tgt.id=src.id)
WHEN MATCHED
THEN UPDATE SET
tgt.directive_id=src.directive_id, tgt.position=src.position
WHEN NOT MATCHED
THEN INSERT (id, directive_id, position)
VALUES (src.id, src.directive_id, src.position);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_CUST' BEGIN
	MERGE INTO ais2.ICS_ENS_CUST AS tgt
USING WI_StageODS.ais2.ICS_ENS_CUST AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.EMAIL=src.EMAIL, tgt.NAME=src.NAME, tgt.TIN=src.TIN, tgt.CITY=src.CITY, tgt.COUNTRY=src.COUNTRY, tgt.POST_CODE=src.POST_CODE, tgt.STREET=src.STREET, tgt.CUST_TYPE=src.CUST_TYPE, tgt.ENS_ID=src.ENS_ID, tgt.AEO_CERTIFICATE_GROUP_ID=src.AEO_CERTIFICATE_GROUP_ID
WHEN NOT MATCHED
THEN INSERT (ID, EMAIL, NAME, TIN, CITY, COUNTRY, POST_CODE, STREET, CUST_TYPE, ENS_ID, AEO_CERTIFICATE_GROUP_ID)
VALUES (src.ID, src.EMAIL, src.NAME, src.TIN, src.CITY, src.COUNTRY, src.POST_CODE, src.STREET, src.CUST_TYPE, src.ENS_ID, src.AEO_CERTIFICATE_GROUP_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_ITEMS' BEGIN
	MERGE INTO ais2.ICS_ENS_ITEMS AS tgt
USING WI_StageODS.ais2.ICS_ENS_ITEMS AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.BALANCE_GROSS_MASS=src.BALANCE_GROSS_MASS, tgt.BALANCE_PACKAGES=src.BALANCE_PACKAGES, tgt.BALN=src.BALN, tgt.CHARG_TYPE=src.CHARG_TYPE, tgt.CHARG_TYPE_BR=src.CHARG_TYPE_BR, tgt.CHARG_TYPE_BRC=src.CHARG_TYPE_BRC, tgt.CODE=src.CODE, tgt.CODE_BR=src.CODE_BR, tgt.CRN=src.CRN, tgt.CRN_BR=src.CRN_BR, tgt.DANG_CODE=src.DANG_CODE, tgt.DANG_CODE_BR=src.DANG_CODE_BR, tgt.DANG_CODE_BRC=src.DANG_CODE_BRC, tgt.ITEM_DESC=src.ITEM_DESC, tgt.ITEM_DESC_BR=src.ITEM_DESC_BR, tgt.GROSS_MASS=src.GROSS_MASS, tgt.GROSS_MASS_BR=src.GROSS_MASS_BR, tgt.NUMB=src.NUMB, tgt.PLACE_OF_LOAD=src.PLACE_OF_LOAD, tgt.PLACE_OF_LOAD_BR=src.PLACE_OF_LOAD_BR, tgt.PLACE_OF_LOAD_BRC=src.PLACE_OF_LOAD_BRC, tgt.PLACE_OF_UNLOAD=src.PLACE_OF_UNLOAD, tgt.PLACE_OF_UNLOAD_BR=src.PLACE_OF_UNLOAD_BR, tgt.PLACE_OF_UNLOAD_BRC=src.PLACE_OF_UNLOAD_BRC, tgt.STATE_BR=src.STATE_BR, tgt.STATE_BRC=src.STATE_BRC, tgt.STATUS=src.STATUS, tgt.ENS_ID=src.ENS_ID, tgt.FACT_ENTRY=src.FACT_ENTRY, tgt.FAKE=src.FAKE, tgt.INTRO=src.INTRO, tgt.REF_NO=src.REF_NO, tgt.REF_COMPLETED=src.REF_COMPLETED
WHEN NOT MATCHED
THEN INSERT (ID, BALANCE_GROSS_MASS, BALANCE_PACKAGES, BALN, CHARG_TYPE, CHARG_TYPE_BR, CHARG_TYPE_BRC, CODE, CODE_BR, CRN, CRN_BR, DANG_CODE, DANG_CODE_BR, DANG_CODE_BRC, ITEM_DESC, ITEM_DESC_BR, GROSS_MASS, GROSS_MASS_BR, NUMB, PLACE_OF_LOAD, PLACE_OF_LOAD_BR, PLACE_OF_LOAD_BRC, PLACE_OF_UNLOAD, PLACE_OF_UNLOAD_BR, PLACE_OF_UNLOAD_BRC, STATE_BR, STATE_BRC, STATUS, ENS_ID, FACT_ENTRY, FAKE, INTRO, REF_NO, REF_COMPLETED)
VALUES (src.ID, src.BALANCE_GROSS_MASS, src.BALANCE_PACKAGES, src.BALN, src.CHARG_TYPE, src.CHARG_TYPE_BR, src.CHARG_TYPE_BRC, src.CODE, src.CODE_BR, src.CRN, src.CRN_BR, src.DANG_CODE, src.DANG_CODE_BR, src.DANG_CODE_BRC, src.ITEM_DESC, src.ITEM_DESC_BR, src.GROSS_MASS, src.GROSS_MASS_BR, src.NUMB, src.PLACE_OF_LOAD, src.PLACE_OF_LOAD_BR, src.PLACE_OF_LOAD_BRC, src.PLACE_OF_UNLOAD, src.PLACE_OF_UNLOAD_BR, src.PLACE_OF_UNLOAD_BRC, src.STATE_BR, src.STATE_BRC, src.STATUS, src.ENS_ID, src.FACT_ENTRY, src.FAKE, src.INTRO, src.REF_NO, src.REF_COMPLETED);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_ITI' BEGIN
	MERGE INTO ais2.ICS_ENS_ITI AS tgt
USING WI_StageODS.ais2.ICS_ENS_ITI AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.COUNTRY=src.COUNTRY, tgt.ENS_ID=src.ENS_ID
WHEN NOT MATCHED
THEN INSERT (ID, COUNTRY, ENS_ID)
VALUES (src.ID, src.COUNTRY, src.ENS_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_SEALS' BEGIN
	MERGE INTO ais2.ICS_ENS_SEALS AS tgt
USING WI_StageODS.ais2.ICS_ENS_SEALS AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.NUMB=src.NUMB, tgt.ENS_ID=src.ENS_ID
WHEN NOT MATCHED
THEN INSERT (ID, NUMB, ENS_ID)
VALUES (src.ID, src.NUMB, src.ENS_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_SUBS_ENTR' BEGIN
	MERGE INTO ais2.ICS_ENS_SUBS_ENTR AS tgt
USING WI_StageODS.ais2.ICS_ENS_SUBS_ENTR AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.CITY=src.CITY, tgt.COUNTRY=src.COUNTRY, tgt.POST_CODE=src.POST_CODE, tgt.STREET=src.STREET, tgt.CODE=src.CODE, tgt.NAME=src.NAME, tgt.ENS_ID=src.ENS_ID
WHEN NOT MATCHED
THEN INSERT (ID, CITY, COUNTRY, POST_CODE, STREET, CODE, NAME, ENS_ID)
VALUES (src.ID, src.CITY, src.COUNTRY, src.POST_CODE, src.STREET, src.CODE, src.NAME, src.ENS_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_GAN_CUST' BEGIN
	MERGE INTO ais2.ICS_GAN_CUST AS tgt
USING WI_StageODS.ais2.ICS_GAN_CUST AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.EMAIL=src.EMAIL, tgt.NAME=src.NAME, tgt.TIN=src.TIN, tgt.CITY=src.CITY, tgt.COUNTRY=src.COUNTRY, tgt.POST_CODE=src.POST_CODE, tgt.STREET=src.STREET, tgt.CUST_TYPE=src.CUST_TYPE, tgt.GAN_ID=src.GAN_ID, tgt.AEO_CERTIFICATE_GROUP_ID=src.AEO_CERTIFICATE_GROUP_ID
WHEN NOT MATCHED
THEN INSERT (ID, EMAIL, NAME, TIN, CITY, COUNTRY, POST_CODE, STREET, CUST_TYPE, GAN_ID, AEO_CERTIFICATE_GROUP_ID)
VALUES (src.ID, src.EMAIL, src.NAME, src.TIN, src.CITY, src.COUNTRY, src.POST_CODE, src.STREET, src.CUST_TYPE, src.GAN_ID, src.AEO_CERTIFICATE_GROUP_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_GAN_ITEMS' BEGIN
	MERGE INTO ais2.ICS_GAN_ITEMS AS tgt
USING WI_StageODS.ais2.ICS_GAN_ITEMS AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.NUMB=src.NUMB, tgt.TRAN_DOCU_CODE=src.TRAN_DOCU_CODE, tgt.TRAN_DOCU_NUMB=src.TRAN_DOCU_NUMB, tgt.GAN_ID=src.GAN_ID, tgt.INTRO=src.INTRO
WHEN NOT MATCHED
THEN INSERT (ID, NUMB, TRAN_DOCU_CODE, TRAN_DOCU_NUMB, GAN_ID, INTRO)
VALUES (src.ID, src.NUMB, src.TRAN_DOCU_CODE, src.TRAN_DOCU_NUMB, src.GAN_ID, src.INTRO);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_BALANCE_REQ_POS' BEGIN
	MERGE INTO ais2.ICS_BALANCE_REQ_POS AS tgt
USING WI_StageODS.ais2.ICS_BALANCE_REQ_POS AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.GROSS_MASS=src.GROSS_MASS, tgt.PACKAGES=src.PACKAGES, tgt.POSITION_NUMBER=src.POSITION_NUMBER, tgt.STATUS=src.STATUS, tgt.ENS_ITEM_ID=src.ENS_ITEM_ID, tgt.REQUEST_ID=src.REQUEST_ID
WHEN NOT MATCHED
THEN INSERT (ID, GROSS_MASS, PACKAGES, POSITION_NUMBER, STATUS, ENS_ITEM_ID, REQUEST_ID)
VALUES (src.ID, src.GROSS_MASS, src.PACKAGES, src.POSITION_NUMBER, src.STATUS, src.ENS_ITEM_ID, src.REQUEST_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_ITEM_ADD_INFO' BEGIN
	MERGE INTO ais2.ICS_ENS_ITEM_ADD_INFO AS tgt
USING WI_StageODS.ais2.ICS_ENS_ITEM_ADD_INFO AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.CODE=src.CODE, tgt.ENS_ITEM_ID=src.ENS_ITEM_ID
WHEN NOT MATCHED
THEN INSERT (ID, CODE, ENS_ITEM_ID)
VALUES (src.ID, src.CODE, src.ENS_ITEM_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_ITEM_CONT' BEGIN
	MERGE INTO ais2.ICS_ENS_ITEM_CONT AS tgt
USING WI_StageODS.ais2.ICS_ENS_ITEM_CONT AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.NUMBER=src.NUMBER, tgt.STATE_BR=src.STATE_BR, tgt.ENS_ITEM_ID=src.ENS_ITEM_ID
WHEN NOT MATCHED
THEN INSERT (ID, NUMBER, STATE_BR, ENS_ITEM_ID)
VALUES (src.ID, src.NUMBER, src.STATE_BR, src.ENS_ITEM_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_ITEM_CUST' BEGIN
	MERGE INTO ais2.ICS_ENS_ITEM_CUST AS tgt
USING WI_StageODS.ais2.ICS_ENS_ITEM_CUST AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.CITY=src.CITY, tgt.COUNTRY=src.COUNTRY, tgt.POST_CODE=src.POST_CODE, tgt.STREET=src.STREET, tgt.EMAIL=src.EMAIL, tgt.NAME=src.NAME, tgt.TIN=src.TIN, tgt.CUST_TYPE=src.CUST_TYPE, tgt.ENS_ITEM_ID=src.ENS_ITEM_ID
WHEN NOT MATCHED
THEN INSERT (ID, CITY, COUNTRY, POST_CODE, STREET, EMAIL, NAME, TIN, CUST_TYPE, ENS_ITEM_ID)
VALUES (src.ID, src.CITY, src.COUNTRY, src.POST_CODE, src.STREET, src.EMAIL, src.NAME, src.TIN, src.CUST_TYPE, src.ENS_ITEM_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_ITEM_PACK' BEGIN
	MERGE INTO ais2.ICS_ENS_ITEM_PACK AS tgt
USING WI_StageODS.ais2.ICS_ENS_ITEM_PACK AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.ITEM_COUNT=src.ITEM_COUNT, tgt.ITEM_COUNT_BR=src.ITEM_COUNT_BR, tgt.PACK_KIND=src.PACK_KIND, tgt.PACK_KIND_BR=src.PACK_KIND_BR, tgt.PACK_MARKS=src.PACK_MARKS, tgt.PACK_MARKS_BR=src.PACK_MARKS_BR, tgt.PACKAGE_COUNT=src.PACKAGE_COUNT, tgt.PACKAGE_COUNT_BR=src.PACKAGE_COUNT_BR, tgt.STATE_BR=src.STATE_BR, tgt.ENS_ITEM_ID=src.ENS_ITEM_ID
WHEN NOT MATCHED
THEN INSERT (ID, ITEM_COUNT, ITEM_COUNT_BR, PACK_KIND, PACK_KIND_BR, PACK_MARKS, PACK_MARKS_BR, PACKAGE_COUNT, PACKAGE_COUNT_BR, STATE_BR, ENS_ITEM_ID)
VALUES (src.ID, src.ITEM_COUNT, src.ITEM_COUNT_BR, src.PACK_KIND, src.PACK_KIND_BR, src.PACK_MARKS, src.PACK_MARKS_BR, src.PACKAGE_COUNT, src.PACKAGE_COUNT_BR, src.STATE_BR, src.ENS_ITEM_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_ITEM_TRANS' BEGIN
	MERGE INTO ais2.ICS_ENS_ITEM_TRANS AS tgt
USING WI_StageODS.ais2.ICS_ENS_ITEM_TRANS AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.COMM_BR=src.COMM_BR, tgt.NATION=src.NATION, tgt.NATION_BR=src.NATION_BR, tgt.SINGS=src.SINGS, tgt.STATE_BR=src.STATE_BR, tgt.TAB_TYPE=src.TAB_TYPE, tgt.ENS_ITEM_ID=src.ENS_ITEM_ID
WHEN NOT MATCHED
THEN INSERT (ID, COMM_BR, NATION, NATION_BR, SINGS, STATE_BR, TAB_TYPE, ENS_ITEM_ID)
VALUES (src.ID, src.COMM_BR, src.NATION, src.NATION_BR, src.SINGS, src.STATE_BR, src.TAB_TYPE, src.ENS_ITEM_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_PROD_DOCU' BEGIN
	MERGE INTO ais2.ICS_ENS_PROD_DOCU AS tgt
USING WI_StageODS.ais2.ICS_ENS_PROD_DOCU AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.CODE=src.CODE, tgt.COMM_BR=src.COMM_BR, tgt.NUMB=src.NUMB, tgt.STATE_BR=src.STATE_BR, tgt.ENS_ITEM_ID=src.ENS_ITEM_ID
WHEN NOT MATCHED
THEN INSERT (ID, CODE, COMM_BR, NUMB, STATE_BR, ENS_ITEM_ID)
VALUES (src.ID, src.CODE, src.COMM_BR, src.NUMB, src.STATE_BR, src.ENS_ITEM_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_ENS_SPEC_MENT' BEGIN
	MERGE INTO ais2.ICS_ENS_SPEC_MENT AS tgt
USING WI_StageODS.ais2.ICS_ENS_SPEC_MENT AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.CODE=src.CODE, tgt.TEXT=src.TEXT, tgt.ENS_ITEM_ID=src.ENS_ITEM_ID
WHEN NOT MATCHED
THEN INSERT (ID, CODE, TEXT, ENS_ITEM_ID)
VALUES (src.ID, src.CODE, src.TEXT, src.ENS_ITEM_ID);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_GAN_CUST_DATA' BEGIN
	MERGE INTO ais2.ICS_GAN_CUST_DATA AS tgt
USING WI_StageODS.ais2.ICS_GAN_CUST_DATA AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.COUNTRY=src.COUNTRY, tgt.MRN=src.MRN, tgt.GAN_ITEM_ID=src.GAN_ITEM_ID, tgt.DETAIL_XML=src.DETAIL_XML, tgt.MODIFY_FLAG=src.MODIFY_FLAG, tgt.ENS_ID=src.ENS_ID, tgt.FROM_303=src.FROM_303, tgt.REJECT_STATUS=src.REJECT_STATUS, tgt.REJECTED=src.REJECTED, tgt.REJECT_REASON=src.REJECT_REASON, tgt.INTRO=src.INTRO
WHEN NOT MATCHED
THEN INSERT (ID, COUNTRY, MRN, GAN_ITEM_ID, DETAIL_XML, MODIFY_FLAG, ENS_ID, FROM_303, REJECT_STATUS, REJECTED, REJECT_REASON, INTRO)
VALUES (src.ID, src.COUNTRY, src.MRN, src.GAN_ITEM_ID, src.DETAIL_XML, src.MODIFY_FLAG, src.ENS_ID, src.FROM_303, src.REJECT_STATUS, src.REJECTED, src.REJECT_REASON, src.INTRO);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_GAN_CUST_DATA_DETL' BEGIN
	MERGE INTO ais2.ICS_GAN_CUST_DATA_DETL AS tgt
USING WI_StageODS.ais2.ICS_GAN_CUST_DATA_DETL AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.NUMBER=src.NUMBER, tgt.STATUS=src.STATUS, tgt.GAN_CUST_DATA_ID=src.GAN_CUST_DATA_ID, tgt.ENS_ITEM_ID=src.ENS_ITEM_ID, tgt.DISC_STATE=src.DISC_STATE, tgt.SEND_330=src.SEND_330, tgt.INTRO=src.INTRO, tgt.REJECT_REASON=src.REJECT_REASON, tgt.SEND_349=src.SEND_349
WHEN NOT MATCHED
THEN INSERT (ID, NUMBER, STATUS, GAN_CUST_DATA_ID, ENS_ITEM_ID, DISC_STATE, SEND_330, INTRO, REJECT_REASON, SEND_349)
VALUES (src.ID, src.NUMBER, src.STATUS, src.GAN_CUST_DATA_ID, src.ENS_ITEM_ID, src.DISC_STATE, src.SEND_330, src.INTRO, src.REJECT_REASON, src.SEND_349);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_GAN_ZCP_CUST_DATA' BEGIN
	MERGE INTO ais2.ICS_GAN_ZCP_CUST_DATA AS tgt
USING WI_StageODS.ais2.ICS_GAN_ZCP_CUST_DATA AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.GAN_CUST_DATA_DETL_ID=src.GAN_CUST_DATA_DETL_ID, tgt.UPO_IDENT_NUMBER=src.UPO_IDENT_NUMBER, tgt.STATUS=src.STATUS, tgt.ZCP_SELF_REF=src.ZCP_SELF_REF, tgt.REGI_DATE=src.REGI_DATE
WHEN NOT MATCHED
THEN INSERT (ID, GAN_CUST_DATA_DETL_ID, UPO_IDENT_NUMBER, STATUS, ZCP_SELF_REF, REGI_DATE)
VALUES (src.ID, src.GAN_CUST_DATA_DETL_ID, src.UPO_IDENT_NUMBER, src.STATUS, src.ZCP_SELF_REF, src.REGI_DATE);
	SET @Merged = 1;
	END
		
	IF @TableName = 'ICS_GAN_ZCP_CUST_DATA_DETL' BEGIN
	MERGE INTO ais2.ICS_GAN_ZCP_CUST_DATA_DETL AS tgt
USING WI_StageODS.ais2.ICS_GAN_ZCP_CUST_DATA_DETL AS src
ON (tgt.ID=src.ID)
WHEN MATCHED
THEN UPDATE SET
tgt.GAN_ZCP_CUST_DATA_ID=src.GAN_ZCP_CUST_DATA_ID, tgt.POSITION_NO=src.POSITION_NO
WHEN NOT MATCHED
THEN INSERT (ID, GAN_ZCP_CUST_DATA_ID, POSITION_NO)
VALUES (src.ID, src.GAN_ZCP_CUST_DATA_ID, src.POSITION_NO);
	SET @Merged = 1;
	END
		
		IF (@Merged = 0)
		BEGIN
				DECLARE @Info VARCHAR(500) = 'W procedurze nie znaleziono bloku odpowiadającego tabeli [' + @TableName + '] z parametru @TableName.';
				THROW 51002, @Info, 0;
					END
				END
			;